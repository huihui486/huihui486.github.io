<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python破解压缩包密码</title>
    <link href="/2023/02/07/python%E7%A0%B4%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%AF%86%E7%A0%81/"/>
    <url>/2023/02/07/python%E7%A0%B4%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><h1 id="2-破解zip、7z等"><a href="#2-破解zip、7z等" class="headerlink" title="2. 破解zip、7z等"></a>2. 破解zip、7z等</h1><h2 id="2-1-快速开始"><a href="#2-1-快速开始" class="headerlink" title="2.1 快速开始"></a>2.1 快速开始</h2><p>python里有个内置库zipfile可以对zip格式压缩包进行操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zipfile<br> <br><span class="hljs-comment"># 创建文件句柄</span><br>file = zipfile.ZipFile(<span class="hljs-string">&quot;测试.zip&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-comment"># 提取压缩包内所有内容，path为目标目录，pwd为密码，需为bytes格式</span><br>file.extractall(path=<span class="hljs-string">&#x27;.&#x27;</span>, pwd=<span class="hljs-string">&#x27;123&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-comment"># 关闭文件</span><br>file.close()<br></code></pre></td></tr></table></figure><p>知道了如何使用代码解压文件，下面只需生成所有可能的密码，编写代码逐一调用函数，直至成功。</p><h2 id="2-2-拓展：“深浅拷贝”"><a href="#2-2-拓展：“深浅拷贝”" class="headerlink" title="2.2 拓展：“深浅拷贝”"></a>2.2 拓展：“深浅拷贝”</h2><p>在生成密码列表的时候，需要对数字&#x2F;字母进行排列组合，此时利用itertools可以方便的生成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = [<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>password_lst = itertools.permutations(nums, <span class="hljs-number">2</span>)  <span class="hljs-comment"># 生成2位数字的所有排列，不重复</span><br></code></pre></td></tr></table></figure><p>这里有2个需要注意的地方，第一个是permutations()生成的是不重复的“排列”，故上述代码生成的列表只有90个元素。</p><p>正确的姿势应该是用product()。</p><p><img src="https://img-blog.csdnimg.cn/ae145db2665444899b925227316dab89.png" alt="itertools官方文档"></p><p>第二个，生成的密码列表password_lst实际上是一个迭代器，对他进行去长度实际上是遍历了一次，这时他指向最后一个元素，生命周期已然耗尽。故我们在获取长度时需要复制一个新的迭代器。</p><p>重点来了，这里涉及到深浅拷贝的问题。简单的赋值操作是浅拷贝，只是传地址，新的变量仍然指向password_lst而不是独立的。</p><p>要实现深拷贝需要用到copy模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br><br><span class="hljs-comment"># 获取迭代器长度</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_length</span>(<span class="hljs-params">generator</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(generator,<span class="hljs-string">&quot;__len__&quot;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(generator)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> generator)<br><br>nums = [<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>password_lst = itertools.permutations(nums, <span class="hljs-number">2</span>)<br>new_lst = copy.deepcopy(password_lst)<br>length = get_length(new_lst)<br></code></pre></td></tr></table></figure><p>还有一种方法，直接遍历一遍password_lst并将所有元素加入到空列表。这样做的好处是方便求长度。下面的代码都会采用这种方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = [<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>password_lst = [<span class="hljs-string">&#x27;&#x27;</span>.join(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> itertools.product(*[nums] * <span class="hljs-number">2</span>)]<br>length = <span class="hljs-built_in">len</span>(password_lst)<br></code></pre></td></tr></table></figure><h2 id="2-3-多线程提高效率"><a href="#2-3-多线程提高效率" class="headerlink" title="2.3 多线程提高效率"></a>2.3 多线程提高效率</h2><p>为了提高破解速度，还可以加入多线程，而且使用线程池(ThreadPoolExecutor)，方便管理、重复利用资源。</p><p>但是在实验过程中还发现一个问题：ThreadPoolExecutor默认使用的是无界队列，尝试密码的速度跟不上生产密码的速度，会把生产任务无限添加到队列中，导致内存被占满，最终导致程序崩溃。</p><p>此处不做展示，请自行测试。</p><p>要解决这个问题，可以重写ThreadPoolExecutor类，给队列设置一个最大值，使无界队列变成有界。</p><p>代码如下</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        展开/隐藏代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><span class="hljs-keyword">import</span> queue<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BoundedThreadPoolExecutor</span>(<span class="hljs-title class_ inherited__">ThreadPoolExecutor</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, max_workers=<span class="hljs-literal">None</span>, thread_name_prefix=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(max_workers, thread_name_prefix)<br>        self._work_queue = queue.Queue(self._max_workers * <span class="hljs-number">2</span>) <span class="hljs-comment"># 设置队列大小</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract</span>(<span class="hljs-params">file, password</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag: <span class="hljs-keyword">return</span><br>    file.extractall(path=<span class="hljs-string">&#x27;.&#x27;</span>, pwd=<span class="hljs-string">&#x27;&#x27;</span>.join(password).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">result</span>(<span class="hljs-params">f</span>):<br>    <span class="hljs-keyword">global</span> flag<br>    exception = f.exception()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag: <span class="hljs-keyword">return</span><br>    <span class="hljs-comment"># 如果获取不到异常说明破解成功</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> exception:<br>        flag = <span class="hljs-literal">False</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n密码为：&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>.join(f.pwd))<br><br><br><br>flag = <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># 创建一个线程池，参数为最大工作数</span><br>pool = BoundedThreadPoolExecutor(<span class="hljs-number">4</span>)<br><br><br><span class="hljs-comment">#密码构成，字母或数字；若含有其他符号，则需修改</span><br>nums = [<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>chrs = [<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65</span>, <span class="hljs-number">91</span>)]<br><br><span class="hljs-comment"># 生成数字4位数密码</span><br>password_lst = [<span class="hljs-string">&#x27;&#x27;</span>.join(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> itertools.product(*[nums] * <span class="hljs-number">4</span>)]<span class="hljs-comment">#此处数字4可换为其他所知道的密码位数</span><br><br><br><span class="hljs-comment"># 创建文件句柄</span><br>zfile = zipfile.ZipFile(<span class="hljs-string">&quot;test.zip&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<span class="hljs-comment"># 此处压缩包名称可换，格式可为zip或7z格式，不可为rar格式，其他格式未测试</span><br><span class="hljs-keyword">for</span> pwd <span class="hljs-keyword">in</span> password_lst:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag: <span class="hljs-keyword">break</span><br>    f = pool.submit(extract, zfile, pwd)<br>    f.pwd = pwd<br>    f.pool = pool<br>    f.add_done_callback(result)<br><br><span class="hljs-comment"># 关闭资源，防止内存泄露</span><br>zfile.close()<br>pool.shutdown(wait=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 等待所有线程完成</span><br></code></pre></td></tr></table></figure>    </div></div><h3 id="2-3-1-测试"><a href="#2-3-1-测试" class="headerlink" title="2.3.1 测试"></a>2.3.1 测试</h3><p>下面来测试一下。</p><p>创建一个测试文件test.txt，并压缩成test.zip，设置密码为1234</p><p><img src="https://img-blog.csdnimg.cn/64f8aef07814492d85d0cf616fecf89f.png" alt="在这里插入图片描述"></p><p>运行程序</p><p><img src="https://img-blog.csdnimg.cn/120bc083a2dc4f18bb13de778669eedd.png" alt="在这里插入图片描述"></p><p>可以看到已经解压成功了</p><p><img src="https://img-blog.csdnimg.cn/a223ae863ecc4787a6bc6070f10f23d2.png" alt="在这里插入图片描述"></p><h2 id="2-4-进度条-用时-两种方案"><a href="#2-4-进度条-用时-两种方案" class="headerlink" title="2.4 进度条+用时(两种方案)"></a>2.4 进度条+用时(两种方案)</h2><h3 id="2-4-1-①子线程打印"><a href="#2-4-1-①子线程打印" class="headerlink" title="2.4.1 ①子线程打印"></a>2.4.1 ①子线程打印</h3><p>进度条功能需要实时监控当前已完成数量，并且与生成的密码列表长度进行比对。因为主线程在不断遍历生成的密码列表，并且不断将新任务放入线程池，故不可能使用主线程进行。而线程池使用队列的形式，不可能让一个线程占用太长时间，否则后面就会卡住进行不下去。</p><p>在这种情况下，只能使用最原始的多线程方式threading开始一个子线程。threading有两种写法，这里我选择的是重写Tread类，并在run方法里写上要运行的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">myThread</span> (threading.Thread):   <span class="hljs-comment">#继承父类threading.Thread</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, length</span>):<br>        threading.Thread.__init__(self)<br>        self.name = name<br>        self.length = length<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):                   <span class="hljs-comment">#把要执行的代码写到run函数里面 线程在创建后会直接运行run函数</span><br>        <span class="hljs-keyword">global</span> flag,process<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag: <span class="hljs-keyword">return</span><br>            percent = process / self.length * <span class="hljs-number">100</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\r当期进度：<span class="hljs-subst">&#123;process&#125;</span> - <span class="hljs-subst">&#123;percent&#125;</span>%&quot;</span>, end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>效果</p><p><img src="https://img-blog.csdnimg.cn/e7dce54e6ac940e3aa71c4f41612f2d5.png" alt="在这里插入图片描述"></p><p>完整代码如下</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        展开/隐藏代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><span class="hljs-keyword">import</span> queue<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BoundedThreadPoolExecutor</span>(<span class="hljs-title class_ inherited__">ThreadPoolExecutor</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, max_workers=<span class="hljs-literal">None</span>, thread_name_prefix=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(max_workers, thread_name_prefix)<br>        self._work_queue = queue.Queue(self._max_workers * <span class="hljs-number">2</span>) <span class="hljs-comment"># 设置队列大小</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myThread</span> (threading.Thread):   <span class="hljs-comment">#继承父类threading.Thread</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, length</span>):<br>        threading.Thread.__init__(self)<br>        self.name = name<br>        self.length = length<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):                   <span class="hljs-comment">#把要执行的代码写到run函数里面 线程在创建后会直接运行run函数</span><br>        <span class="hljs-keyword">global</span> flag,process<br>        last_time = time.time()<br>        number = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>            p = process<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag: <span class="hljs-keyword">return</span><br>            percent = p / self.length * <span class="hljs-number">100</span><br>            current_time = time.time()<br>            speed = (p-number)/(current_time-last_time)<br>            number = p<br>            last_time = current_time<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\r已完成：%d/%d - %.2f&quot;</span>%(p,self.length,percent)+<span class="hljs-string">&quot;%  &quot;</span>+<span class="hljs-string">&quot;速度：%.2fp/s&quot;</span>%(speed), end=<span class="hljs-string">&quot;&quot;</span>)<br>            <span class="hljs-comment"># 未找到密码</span><br>            <span class="hljs-keyword">if</span> (p &gt;= self.length) <span class="hljs-keyword">and</span> flag:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n未找到密码&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract</span>(<span class="hljs-params">file, password</span>):<br>    <span class="hljs-keyword">global</span> process<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag: <span class="hljs-keyword">return</span><br>    process += <span class="hljs-number">1</span><br>    file.extractall(path=<span class="hljs-string">&#x27;after&#x27;</span>, pwd=<span class="hljs-string">&#x27;&#x27;</span>.join(password).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">result</span>(<span class="hljs-params">f</span>):<br>    <span class="hljs-keyword">global</span> flag<br>    exception = f.exception()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag: <span class="hljs-keyword">return</span><br>    <span class="hljs-comment"># 如果获取不到异常说明破解成功</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> exception:<br>        flag = <span class="hljs-literal">False</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n密码为：&#x27;</span>, f.pwd)<br><br><br><br>flag = <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># 创建一个线程池</span><br>pool = BoundedThreadPoolExecutor(<span class="hljs-number">4</span>)<br><br><span class="hljs-comment"># 进度</span><br>process = <span class="hljs-number">0</span><br><br><br><span class="hljs-comment">#密码构成，字母或数字；若含有其他符号，则需修改</span><br>nums = [<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>chrs = [<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65</span>, <span class="hljs-number">91</span>)]<br><br><span class="hljs-comment"># 生成数字+字母的4位数密码</span><br>password_lst = [<span class="hljs-string">&#x27;&#x27;</span>.join(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> itertools.product(*[nums+chrs] * <span class="hljs-number">4</span>)]<br><br><br><span class="hljs-comment"># 创建进度显示线程</span><br>process_bar = myThread(name=<span class="hljs-string">&#x27;process_bar&#x27;</span>,length=<span class="hljs-built_in">len</span>(password_lst))<br>process_bar.setDaemon(<span class="hljs-literal">True</span>)   <span class="hljs-comment"># 守护线程</span><br>process_bar.start()<br><br><br><span class="hljs-comment"># 创建文件句柄</span><br>zfile = zipfile.ZipFile(<span class="hljs-string">&quot;before/test.zip&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<span class="hljs-comment"># 此处压缩包名称可换，格式可为zip或7z格式，不可为rar格式，其他格式未测试</span><br><span class="hljs-keyword">for</span> pwd <span class="hljs-keyword">in</span> password_lst:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag: <span class="hljs-keyword">break</span><br>    f = pool.submit(extract, zfile, pwd)<br>    f.pwd = pwd<br>    f.pool = pool<br>    f.add_done_callback(result)<br><br><span class="hljs-comment"># 关闭资源，防止内存泄露</span><br>zfile.close()<br>pool.shutdown(wait=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 等待所有线程完成</span><br><br><span class="hljs-comment"># 等待子线程退出</span><br>process_bar.join()<br><br></code></pre></td></tr></table></figure>    </div></div><h3 id="2-4-2-②tqdm第三方库"><a href="#2-4-2-②tqdm第三方库" class="headerlink" title="2.4.2 ②tqdm第三方库"></a>2.4.2 ②tqdm第三方库</h3><h4 id="2-4-2-1-快速开始"><a href="#2-4-2-1-快速开始" class="headerlink" title="2.4.2.1 快速开始"></a>2.4.2.1 快速开始</h4><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install tqdm<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>)):<br>    time.sleep(<span class="hljs-number">0.5</span>)<br></code></pre></td></tr></table></figure><p>输出</p><p><img src="https://img-blog.csdnimg.cn/0733e0e2117647978480eba65e8dbd4b.png" alt="在这里插入图片描述"></p><h4 id="2-4-2-2-应用"><a href="#2-4-2-2-应用" class="headerlink" title="2.4.2.2 应用"></a>2.4.2.2 应用</h4><p>只需将tqdm写在主线程的for循环上即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> pwd <span class="hljs-keyword">in</span> tqdm(password_lst):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag: <span class="hljs-keyword">break</span><br>    f = pool.submit(extract, zfile, pwd)<br>    f.pwd = pwd<br>    f.pool = pool<br>    f.add_done_callback(result)<br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://img-blog.csdnimg.cn/167e49dadf7649e2b70e350b46d6e1f0.png" alt="在这里插入图片描述"></p><h2 id="2-5-封装"><a href="#2-5-封装" class="headerlink" title="2.5 封装"></a>2.5 封装</h2><p>至此，程序搭建成功。</p><p>下面可以进行封装，方便调用。</p><p>完整代码如下</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        展开/隐藏代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> queue<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BoundedThreadPoolExecutor</span>(<span class="hljs-title class_ inherited__">ThreadPoolExecutor</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, max_workers=<span class="hljs-literal">None</span>, thread_name_prefix=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(max_workers, thread_name_prefix)<br>        self._work_queue = queue.Queue(self._max_workers * <span class="hljs-number">2</span>) <span class="hljs-comment"># 设置队列大小</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakZip</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, srcpath, despath</span>):<br>        self.srcpath = srcpath  <span class="hljs-comment"># 原文件路径</span><br>        self.despath = despath  <span class="hljs-comment"># 目标目录</span><br>        self.zfile = <span class="hljs-literal">None</span><br>        self._check_file()  <span class="hljs-comment"># 校验文件</span><br>        self.flag = <span class="hljs-literal">True</span>  <span class="hljs-comment"># 标志位</span><br>        self.process = <span class="hljs-number">0</span>  <span class="hljs-comment"># 进度</span><br>        self.pool = BoundedThreadPoolExecutor(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 创建一个线程池</span><br>        self.password_lst = []  <span class="hljs-comment"># 密码本</span><br>        self._gen_pwd_lst()  <span class="hljs-comment"># 生成密码本</span><br>        self.length = <span class="hljs-built_in">len</span>(self.password_lst)<br>        self.lock = threading.Lock()  <span class="hljs-comment"># 同步锁</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_file</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 创建文件句柄</span><br>            self.zfile = zipfile.ZipFile(self.srcpath, <span class="hljs-string">&#x27;r&#x27;</span>)  <span class="hljs-comment"># 此处压缩包名称可换，格式可为zip或7z格式，不可为rar格式，其他格式未测试</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br>            sys.exit()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_pwd_lst</span>(<span class="hljs-params">self, password_lst</span>):<br>        self.password_lst = password_lst<br>        self.length = <span class="hljs-built_in">len</span>(self.password_lst)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_gen_pwd_lst</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 密码构成，字母或数字；若含有其他符号，则需修改</span><br>        nums = [<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>        chrs = [<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65</span>, <span class="hljs-number">91</span>)]<br>        <span class="hljs-comment"># 生成数字+字母的4位数密码</span><br>        self.password_lst = [<span class="hljs-string">&#x27;&#x27;</span>.join(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> itertools.product(*[nums + chrs] * <span class="hljs-number">2</span>)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_extract</span>(<span class="hljs-params">self, password</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.flag: <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">with</span> self.lock:<br>            self.process += <span class="hljs-number">1</span><br>        self.zfile.extractall(path=self.despath, pwd=<span class="hljs-string">&#x27;&#x27;</span>.join(password).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_result</span>(<span class="hljs-params">self, f</span>):<br>        exception = f.exception()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.flag: <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 如果获取不到异常说明破解成功</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> exception:<br>            self.flag = <span class="hljs-literal">False</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n密码为：&#x27;</span>, f.pwd)<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 遍历密码本，进度条显示</span><br>        <span class="hljs-keyword">for</span> pwd <span class="hljs-keyword">in</span> tqdm(self.password_lst):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.flag: <span class="hljs-keyword">break</span><br>            f = self.pool.submit(self._extract, pwd)<br>            f.pwd = pwd<br>            f.pool = self.pool<br>            f.add_done_callback(self._result)<br><br>        <span class="hljs-comment"># 关闭资源，防止内存泄露</span><br>        self.zfile.close()<br>        self.pool.shutdown(wait=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 等待所有线程完成</span><br>        <span class="hljs-comment"># 未找到密码</span><br>        <span class="hljs-keyword">if</span> self.flag:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n未找到密码&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_pwd_lst</span>():<br>    <br>    <span class="hljs-comment"># 密码构成，字母或数字；若含有其他符号，则需修改</span><br>    nums = [<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>    chrs = [<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65</span>, <span class="hljs-number">91</span>)]<br>    <span class="hljs-comment"># 生成数字+字母的4位数密码</span><br>    password_lst = [<span class="hljs-string">&#x27;&#x27;</span>.join(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> itertools.product(*[nums + chrs] * <span class="hljs-number">4</span>)]<br>    <span class="hljs-keyword">return</span> password_lst<br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    srcpath = <span class="hljs-string">&#x27;before/test.zip&#x27;</span><br>    despath = <span class="hljs-string">&#x27;after&#x27;</span><br>    password_lst = gen_pwd_lst()<br>    breakzip = BreakZip(srcpath,despath)<br>    breakzip.set_pwd_lst(password_lst)<br>    breakzip.start()<br></code></pre></td></tr></table></figure>    </div></div><p>上面的密码本生成和文件路径都是写死的，所以除此之外，还可以通过输入来获取以上信息。而且还加入了第三方库filetype用来判断文件类型。</p><p>完整代码如下</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        展开/隐藏代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> queue<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> filetype<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BoundedThreadPoolExecutor</span>(<span class="hljs-title class_ inherited__">ThreadPoolExecutor</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, max_workers=<span class="hljs-literal">None</span>, thread_name_prefix=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(max_workers, thread_name_prefix)<br>        self._work_queue = queue.Queue(self._max_workers * <span class="hljs-number">2</span>) <span class="hljs-comment"># 设置队列大小</span><br><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakZip</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, srcpath, despath</span>):<br>        self.srcpath = srcpath  <span class="hljs-comment"># 原文件路径</span><br>        self.despath = despath  <span class="hljs-comment"># 目标目录</span><br>        self.zfile = <span class="hljs-literal">None</span><br>        self._check_file()  <span class="hljs-comment"># 校验文件</span><br>        self.flag = <span class="hljs-literal">True</span>  <span class="hljs-comment"># 标志位</span><br>        self.process = <span class="hljs-number">0</span>  <span class="hljs-comment"># 进度</span><br>        self.pool = BoundedThreadPoolExecutor(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 创建一个线程池</span><br>        self.password_lst = []  <span class="hljs-comment"># 密码本</span><br>        self._gen_pwd_lst()  <span class="hljs-comment"># 生成密码本</span><br>        self.length = <span class="hljs-built_in">len</span>(self.password_lst)<br>        self.lock = threading.Lock()  <span class="hljs-comment"># 同步锁</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_check_file</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 创建文件句柄</span><br>            self.zfile = zipfile.ZipFile(self.srcpath, <span class="hljs-string">&#x27;r&#x27;</span>)  <span class="hljs-comment"># 此处压缩包名称可换，格式可为zip或7z格式，不可为rar格式，其他格式未测试</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br>            sys.exit()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_pwd_lst</span>(<span class="hljs-params">self, password_lst</span>):<br>        self.password_lst = password_lst<br>        self.length = <span class="hljs-built_in">len</span>(self.password_lst)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_gen_pwd_lst</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 密码构成，字母或数字；若含有其他符号，则需修改</span><br>        nums = [<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>        chrs = [<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65</span>, <span class="hljs-number">91</span>)]<br>        <span class="hljs-comment"># 生成数字+字母的4位数密码</span><br>        self.password_lst = [<span class="hljs-string">&#x27;&#x27;</span>.join(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> itertools.product(*[nums + chrs] * <span class="hljs-number">2</span>)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_process_bar</span>(<span class="hljs-params">self</span>):<br>        last_time = time.time()<br>        number = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>            p = self.process<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.flag: <span class="hljs-keyword">return</span><br>            percent = p / self.length * <span class="hljs-number">100</span><br>            current_time = time.time()<br>            speed = (p - number) / (current_time - last_time)<br>            number = p<br>            last_time = current_time<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\r已完成：%d/%d - %.2f&quot;</span> % (p, self.length, percent) + <span class="hljs-string">&quot;%  &quot;</span> + <span class="hljs-string">&quot;速度：%.2fp/s&quot;</span> % (speed), end=<span class="hljs-string">&quot;&quot;</span>)<br>            <span class="hljs-comment"># 未找到密码，退出</span><br>            <span class="hljs-keyword">if</span> (p &gt;= self.length) <span class="hljs-keyword">and</span> self.flag:<br>                <span class="hljs-keyword">return</span><br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_extract</span>(<span class="hljs-params">self, password</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.flag: <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">with</span> self.lock:<br>            self.process += <span class="hljs-number">1</span><br>        self.zfile.extractall(path=self.despath, pwd=<span class="hljs-string">&#x27;&#x27;</span>.join(password).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_result</span>(<span class="hljs-params">self, f</span>):<br>        exception = f.exception()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.flag: <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 如果获取不到异常说明破解成功</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> exception:<br>            self.flag = <span class="hljs-literal">False</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n密码为：&#x27;</span>, f.pwd)<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 遍历密码本</span><br>        <span class="hljs-keyword">for</span> pwd <span class="hljs-keyword">in</span> tqdm(self.password_lst):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.flag: <span class="hljs-keyword">break</span><br>            f = self.pool.submit(self._extract, pwd)<br>            f.pwd = pwd<br>            f.pool = self.pool<br>            f.add_done_callback(self._result)<br><br>        <span class="hljs-comment"># 关闭资源，防止内存泄露</span><br>        self.zfile.close()<br>        self.pool.shutdown(wait=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 等待所有线程完成</span><br>        <span class="hljs-comment"># 未找到密码</span><br>        <span class="hljs-keyword">if</span> self.flag:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n未找到密码&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_input_info</span>():<br>    <span class="hljs-comment"># 获取文件、目录路径</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        srcpath = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入要破解的压缩包位置(绝对/相对路径)：&#x27;</span>))<br>        despath = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入要保存的位置(回车默认文档名字目录)：&#x27;</span>))<br>        <span class="hljs-keyword">if</span> despath == <span class="hljs-string">&#x27;&#x27;</span>:<br>            despath = srcpath.replace(<span class="hljs-string">&#x27;.zip&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>)<br>        <span class="hljs-comment"># 校验文件</span><br>        <span class="hljs-keyword">try</span>:<br>            kind = filetype.guess(srcpath)<br>            <span class="hljs-keyword">if</span> kind <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Cannot guess file type!&#x27;</span>)<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">elif</span> kind.extension != <span class="hljs-string">&#x27;zip&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;7z&#x27;</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Is not a zip or 7z file&#x27;</span>)<br>                <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-comment"># 检查输出目录</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isdir(despath):<br>        os.mkdir(despath)<br>    <span class="hljs-comment"># 获取密码相关信息</span><br>    nums = [<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]  <span class="hljs-comment"># 数字</span><br>    hchrs = [<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65</span>, <span class="hljs-number">91</span>)]  <span class="hljs-comment"># 大写字母</span><br>    lchrs = [<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">97</span>, <span class="hljs-number">123</span>)]  <span class="hljs-comment"># 小写字母</span><br>    spes = [<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>, <span class="hljs-number">48</span>)]+[<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">91</span>, <span class="hljs-number">97</span>)]+[<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">123</span>, <span class="hljs-number">127</span>)]  <span class="hljs-comment"># 特殊字符</span><br>    type_all = [<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>)]  <span class="hljs-comment"># 所有</span><br>    wordstype_all = [nums,lchrs,hchrs,spes]<br>    words = []<br>    <span class="hljs-comment"># 密码范围</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请指定密码可能涉及的字符:&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1.数字&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;2.小写英文字母&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;3.大写英文字母&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;4.特殊字符&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;5.所有可打印字符&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;6.自由组合&#x27;</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        wordstype = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>)<br>        <span class="hljs-keyword">if</span> wordstype == <span class="hljs-string">&#x27;1&#x27;</span>:<br>            words = nums<br>        <span class="hljs-keyword">elif</span> wordstype == <span class="hljs-string">&#x27;2&#x27;</span>:<br>            words = lchrs<br>        <span class="hljs-keyword">elif</span> wordstype == <span class="hljs-string">&#x27;3&#x27;</span>:<br>            words = hchrs<br>        <span class="hljs-keyword">elif</span> wordstype == <span class="hljs-string">&#x27;4&#x27;</span>:<br>            words = spes<br>        <span class="hljs-keyword">elif</span> wordstype == <span class="hljs-string">&#x27;5&#x27;</span>:<br>            words = type_all<br>        <span class="hljs-keyword">elif</span> wordstype == <span class="hljs-string">&#x27;6&#x27;</span>:<br>            comwords = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请指定组合类型（如2,1或3,4）：&#x27;</span>)<br>            comlist = re.split(<span class="hljs-string">&#x27;,|，&#x27;</span>,comwords)<br>            <span class="hljs-built_in">print</span>(comlist)<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> comlist:<br>                words += wordstype_all[<span class="hljs-built_in">int</span>(i) - <span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;非法输入，请重试&#x27;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-comment"># 密码长度</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        wordsnum = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入长度：&#x27;</span>)<br>        <span class="hljs-keyword">if</span> wordsnum.isdigit():<br>            wordsnum = <span class="hljs-built_in">int</span>(wordsnum)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;非法输入，请重试&#x27;</span>)<br><br>    password_lst = [<span class="hljs-string">&#x27;&#x27;</span>.join(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> itertools.product(*[words] * wordsnum)]<br>    <span class="hljs-keyword">return</span> (srcpath,despath,password_lst)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    srcpath, despath, password_lst = get_input_info()<br>    breakzip = BreakZip(srcpath,despath)<br>    breakzip.set_pwd_lst(password_lst)<br>    breakzip.start()<br>    <br></code></pre></td></tr></table></figure>    </div></div><p>效果如下（绿色字体为手动输入）</p><p><img src="https://img-blog.csdnimg.cn/d43c2442f6084a1d826550d46efe36ac.png" alt="在这里插入图片描述"></p><h1 id="3-破解rar"><a href="#3-破解rar" class="headerlink" title="3. 破解rar"></a>3. 破解rar</h1><h2 id="3-1-环境配置"><a href="#3-1-环境配置" class="headerlink" title="3.1 环境配置"></a>3.1 环境配置</h2><p>安装unrar模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install unrar<br></code></pre></td></tr></table></figure><p>下载安装 unrar library（按照默认路径）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">http://www.rarlab.com/rar/UnRARDLL.exe<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/fe87f5405f284628a46afc9b07c864db.png" alt="在这里插入图片描述"></p><p>（注：下面都是以win64位演示）</p><p>配置环境变量</p><p>系统变量中新建变量，变量名输入 UNRAR_LIB_PATH，变量值为 C:\Program Files (x86)\UnrarDLL\x64\unrar.dll</p><p><img src="https://img-blog.csdnimg.cn/82451230addf445695295adc3054e9d1.png" alt="在这里插入图片描述"></p><p>进入目录C:\Program Files (x86)\UnrarDLL\x64修改下文件名</p><p><img src="https://img-blog.csdnimg.cn/2a3904845b5e4e8abad46db64683792f.png" alt="在这里插入图片描述"></p><p>重启pycharm</p><h2 id="3-2-快速开始"><a href="#3-2-快速开始" class="headerlink" title="3.2 快速开始"></a>3.2 快速开始</h2><p>将test.txt压缩成test.rar，密码设置为123，运行代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> unrar <span class="hljs-keyword">import</span> rarfile<br><br><br>file = rarfile.RarFile(<span class="hljs-string">&#x27;test.rar&#x27;</span>)  <span class="hljs-comment">#这里写入的是需要解压的文件，别忘了加路径</span><br>file.extractall(path=<span class="hljs-string">&#x27;.&#x27;</span>, pwd=<span class="hljs-string">&#x27;123&#x27;</span>)  <span class="hljs-comment">#这里写入的是你想要解压到的文件夹</span><br></code></pre></td></tr></table></figure><p>解压成功</p><p><img src="https://img-blog.csdnimg.cn/97fd8b8bfefe483a9cde0773706183c8.png" alt="在这里插入图片描述"></p><p>需要注意的是，与zipfile不同，此处extractall()的pwd不需要encode转码，该方法会自动转码。</p><h2 id="3-3-多线程"><a href="#3-3-多线程" class="headerlink" title="3.3 多线程"></a>3.3 多线程</h2><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>小应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>暴力破解</tag>
      
      <tag>压缩包</tag>
      
      <tag>密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>按序输出方形位置信息</title>
    <link href="/2023/02/04/%E6%8C%89%E5%BA%8F%E8%BE%93%E5%87%BA%E6%96%B9%E5%BD%A2%E4%BD%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/"/>
    <url>/2023/02/04/%E6%8C%89%E5%BA%8F%E8%BE%93%E5%87%BA%E6%96%B9%E5%BD%A2%E4%BD%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="1-需求"><a href="#1-需求" class="headerlink" title="1. 需求"></a>1. 需求</h1><p>现在有这样一个需求：</p><p>如下图，将图中的方框的信息（如每本书的书名）输出，且顺序为从左到右、从上到下。已知每个方框的左上角、右下角坐标。</p><p><img src="https://img-blog.csdnimg.cn/2d45974ac64e4302ad49fa264cb38c8c.jpeg" alt="在这里插入图片描述"></p><p>而且这两点坐标由上层代码给出，此处仅处理本需求，不涉及上层代码，故此处不贴出源代码，仅展示上层提供的数据。</p><p>上层检测代码给我们提供了每个方框左上角及右下角的坐标，用一个列表box表示。并将所有box装在一个列表box_list里：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">box = [x1,y1,x2,y2,name]<br>box_list = [<br>    [x1,y1,x2,y2,name],<br>    [x1,y1,x2,y2,name],<br>    [x1,y1,x2,y2,name],<br>    [x1,y1,x2,y2,name],<br>    [x1,y1,x2,y2,name],<br>]<br></code></pre></td></tr></table></figure><p>对应坐标位置关系如下图所示，name代表该方形名称。</p><p><img src="https://img-blog.csdnimg.cn/946698e6f9614449ae542ce1dbc04e53.png" alt="在这里插入图片描述"></p><p>最终的输出结果示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">第<span class="hljs-number">1</span>行第<span class="hljs-number">1</span>列：box1<br>第<span class="hljs-number">1</span>行第<span class="hljs-number">2</span>列：box2<br>第<span class="hljs-number">2</span>行第<span class="hljs-number">1</span>列：box3<br>第<span class="hljs-number">2</span>行第<span class="hljs-number">2</span>列：box4<br>第<span class="hljs-number">2</span>行第<span class="hljs-number">3</span>列：box5<br></code></pre></td></tr></table></figure><h1 id="2-方法一"><a href="#2-方法一" class="headerlink" title="2. 方法一"></a>2. 方法一</h1><h2 id="2-1-想法"><a href="#2-1-想法" class="headerlink" title="2.1 想法"></a>2.1 想法</h2><p>看到这个问题，我的第一个想法（也是最笨的方法）就是：将每个点的坐标进行比较。</p><p>具体来说就是先找到y坐标最小的点，以该点所在框为基准，循环判断每一个框的y坐标值，若他们的差的绝对值在一定范围则划定为同一行</p><p>实现这个想法需要考虑的问题有：</p><ul><li>该差值是基准框与其他框的上边框还是下边框比较</li><li>基准框与其他框上下边框位置关系。不同的位置关系可能导致不同的结果，即在不在同一行的判断。</li></ul><p>例如下面这种情况，A方框到底是属于第一行还是第二行呢？用几个方框的上下边框y坐标显然很难表达。</p><p><img src="https://img-blog.csdnimg.cn/2316ce0a564b410aba65f4b4c062d12a.png" alt="在这里插入图片描述"></p><p>正是由于过于复杂、过于笨拙，遂很快放弃这种方案。</p><h1 id="3-方法二"><a href="#3-方法二" class="headerlink" title="3. 方法二"></a>3. 方法二</h1><h2 id="3-1-想法"><a href="#3-1-想法" class="headerlink" title="3.1 想法"></a>3.1 想法</h2><p>既然同时用上下边角坐标比较计算过于拙劣，那么简化一下，用他们的平均值坐标，也就是利用方形的重心，不就可以大大降低难度！而且准确率也比自己枚举法列出的情况高得多。</p><h2 id="3-2-准备工作"><a href="#3-2-准备工作" class="headerlink" title="3.2 准备工作"></a>3.2 准备工作</h2><p>获取到重心坐标后，对x、y方向坐标进行排序是必须的。对列表进行排序比较容易想到的是利用sort()函数。但单纯调用sort()默认是对列表第一个数进行排序，仍不能达到我们的目标，故需要进行一些处理。</p><p>利用sort函数的key属性，我们可以给sort传递一个函数，只要这个函数返回列表对应位数，就可以对指定位数进行排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取列表的第二个元素</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">takeSecond</span>(<span class="hljs-params">elem</span>):<br>    <span class="hljs-keyword">return</span> elem[<span class="hljs-number">1</span>]<br><span class="hljs-comment"># 获取列表的第一个元素</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">takeSum</span>(<span class="hljs-params">elem</span>):<br>    <span class="hljs-keyword">return</span> elem[<span class="hljs-number">0</span>]+elem[<span class="hljs-number">1</span>]<br><br><br><span class="hljs-comment"># 对列表第二个数排序（从小到大）</span><br>box_list.sort(key=takeSecond)<br><span class="hljs-built_in">print</span>(box_list)<br><span class="hljs-comment"># 对列表第一、二个数的和排序</span><br>box_list.sort(key=takeSum)<br><span class="hljs-built_in">print</span>(box_list)<br></code></pre></td></tr></table></figure><h2 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h2><p>首先写上获取方形重心坐标函数.</p><p>计算得出重心x、y坐标后加入在原列表5、6号位，方便使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getBarycenter</span>(<span class="hljs-params">box_list</span>):<br>    num = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> box <span class="hljs-keyword">in</span> box_list:<br>        box_list[num].append(<span class="hljs-built_in">int</span>((box[<span class="hljs-number">0</span>]+box[<span class="hljs-number">2</span>])/<span class="hljs-number">2</span>))<br>        box_list[num].append(<span class="hljs-built_in">int</span>((box[<span class="hljs-number">1</span>]+box[<span class="hljs-number">3</span>])/<span class="hljs-number">2</span>))<br>        num += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>然后将同一行按序放在一个列表里</p><p>先对重心y坐标排序，以最小的那个方形为基础，判断谁与之同行。只需循环遍历判断两个重心y坐标差值绝对值是否在一个误差区间内即可。这个误差需要根据实际情况进行调整</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取重心x坐标</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">takeXC</span>(<span class="hljs-params">elem</span>):<br>    <span class="hljs-keyword">return</span> elem[<span class="hljs-number">5</span>]<br><span class="hljs-comment"># 获取重心y坐标</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">takeYC</span>(<span class="hljs-params">elem</span>):<br>    <span class="hljs-keyword">return</span> elem[<span class="hljs-number">6</span>]<br><br><span class="hljs-comment"># 获取一行</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getBox</span>(<span class="hljs-params">box_list,dev</span>):<br>    print_list = []<br>    box_list.sort(key=takeYC)<br>    <span class="hljs-keyword">for</span> box <span class="hljs-keyword">in</span> box_list:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(box[<span class="hljs-number">6</span>] - box_list[<span class="hljs-number">0</span>][<span class="hljs-number">6</span>]) &lt;= dev:<br>            print_list.append(box)<br><br>    print_list.sort(key=takeXC)<br>    <span class="hljs-keyword">for</span> box <span class="hljs-keyword">in</span> print_list:<br>        box_list.remove(box)<br>    <span class="hljs-keyword">return</span> print_list<br></code></pre></td></tr></table></figure><p>接着循环调用上面的函数直至排序完</p><p>而且将每行都装在一个列表里，方便后面打印信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 从左到右从上到下</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getSortBoxs</span>(<span class="hljs-params">box_list,dev=<span class="hljs-number">20</span></span>):<br>    getBarycenter(box_list)<br>    sort_boxs = []<br>    <span class="hljs-keyword">while</span> box_list != []:<br>        sort_boxs.append(getBox(box_list,dev))<br>    <span class="hljs-keyword">return</span> sort_boxs<br></code></pre></td></tr></table></figure><p>最后将信息打印出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 打印</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printBoxs</span>(<span class="hljs-params">result</span>):<br>    <span class="hljs-keyword">for</span> line_boxs,i <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(result,<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(result)+<span class="hljs-number">1</span>)):<br>        <span class="hljs-keyword">for</span> box,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(line_boxs,<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(line_boxs)+<span class="hljs-number">1</span>)):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;第<span class="hljs-subst">&#123;i&#125;</span>行第<span class="hljs-subst">&#123;j&#125;</span>列：&#x27;</span> + <span class="hljs-built_in">str</span>(box[<span class="hljs-number">4</span>]))<br></code></pre></td></tr></table></figure><p>至此，我们可以测试一下。</p><p>假设有一个这样的列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">box_list = [<br>        [<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">70</span>,<span class="hljs-number">90</span>,<span class="hljs-number">1</span>],<br>        [<span class="hljs-number">90</span>,<span class="hljs-number">110</span>,<span class="hljs-number">130</span>,<span class="hljs-number">160</span>,<span class="hljs-number">2</span>],<br>        [<span class="hljs-number">10</span>,<span class="hljs-number">120</span>,<span class="hljs-number">40</span>,<span class="hljs-number">150</span>,<span class="hljs-number">3</span>],<br>        [<span class="hljs-number">60</span>,<span class="hljs-number">10</span>,<span class="hljs-number">80</span>,<span class="hljs-number">40</span>,<span class="hljs-number">4</span>],<br>        [<span class="hljs-number">90</span>,<span class="hljs-number">70</span>,<span class="hljs-number">120</span>,<span class="hljs-number">110</span>,<span class="hljs-number">5</span>],<br>        [<span class="hljs-number">20</span>,<span class="hljs-number">60</span>,<span class="hljs-number">40</span>,<span class="hljs-number">100</span>,<span class="hljs-number">6</span>],<br>        [<span class="hljs-number">50</span>,<span class="hljs-number">110</span>,<span class="hljs-number">70</span>,<span class="hljs-number">130</span>,<span class="hljs-number">7</span>],<br>    ]<br></code></pre></td></tr></table></figure><p>他的图形大致为如下所示：</p><p><img src="https://img-blog.csdnimg.cn/468371f337ba427daa19e06e9ae0d756.png" alt="在这里插入图片描述"></p><p>完整代码如下</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        完整代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">takeXC</span>(<span class="hljs-params">elem</span>):<br>    <span class="hljs-keyword">return</span> elem[<span class="hljs-number">5</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">takeYC</span>(<span class="hljs-params">elem</span>):<br>    <span class="hljs-keyword">return</span> elem[<span class="hljs-number">6</span>]<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getBarycenter</span>(<span class="hljs-params">box_list</span>):<br>    num = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> box <span class="hljs-keyword">in</span> box_list:<br>        box_list[num].append(<span class="hljs-built_in">int</span>((box[<span class="hljs-number">0</span>]+box[<span class="hljs-number">2</span>])/<span class="hljs-number">2</span>))<br>        box_list[num].append(<span class="hljs-built_in">int</span>((box[<span class="hljs-number">1</span>]+box[<span class="hljs-number">3</span>])/<span class="hljs-number">2</span>))<br>        num += <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getBox02</span>(<span class="hljs-params">box_list,dev</span>):<br>    print_list = []<br>    box_list.sort(key=takeYC)<br>    <span class="hljs-keyword">for</span> box <span class="hljs-keyword">in</span> box_list:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(box[<span class="hljs-number">6</span>] - box_list[<span class="hljs-number">0</span>][<span class="hljs-number">6</span>]) &lt;= dev:<br>            print_list.append(box)<br><br>    print_list.sort(key=takeFirst)<br>    <span class="hljs-keyword">for</span> box <span class="hljs-keyword">in</span> print_list:<br>        box_list.remove(box)<br>    <span class="hljs-keyword">return</span> print_list<br><br><br><span class="hljs-comment"># 获取一行</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getBox</span>(<span class="hljs-params">box_list,dev</span>):<br>    print_list = []<br>    box_list.sort(key=takeYC)<br>    <span class="hljs-keyword">for</span> box <span class="hljs-keyword">in</span> box_list:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(box[<span class="hljs-number">6</span>] - box_list[<span class="hljs-number">0</span>][<span class="hljs-number">6</span>]) &lt;= dev:<br>            print_list.append(box)<br><br>    print_list.sort(key=takeXC)<br>    <span class="hljs-keyword">for</span> box <span class="hljs-keyword">in</span> print_list:<br>        box_list.remove(box)<br>    <span class="hljs-keyword">return</span> print_list<br><br><span class="hljs-comment"># 从左到右从上到下</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getSortBoxs</span>(<span class="hljs-params">box_list,dev=<span class="hljs-number">20</span></span>):<br>    getBarycenter(box_list)<br>    sort_boxs = []<br>    <span class="hljs-keyword">while</span> box_list != []:<br>        sort_boxs.append(getBox(box_list,dev))<br>    <span class="hljs-keyword">return</span> sort_boxs<br><br><br><span class="hljs-comment"># 打印</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printBoxs</span>(<span class="hljs-params">result</span>):<br>    <span class="hljs-keyword">for</span> line_boxs,i <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(result,<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(result)+<span class="hljs-number">1</span>)):<br>        <span class="hljs-keyword">for</span> box,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(line_boxs,<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(line_boxs)+<span class="hljs-number">1</span>)):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;第<span class="hljs-subst">&#123;i&#125;</span>行第<span class="hljs-subst">&#123;j&#125;</span>列：&#x27;</span> + <span class="hljs-built_in">str</span>(box[<span class="hljs-number">4</span>]))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    box_list = [<br>        [<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">70</span>,<span class="hljs-number">90</span>,<span class="hljs-number">1</span>],<br>        [<span class="hljs-number">90</span>,<span class="hljs-number">110</span>,<span class="hljs-number">130</span>,<span class="hljs-number">160</span>,<span class="hljs-number">2</span>],<br>        [<span class="hljs-number">10</span>,<span class="hljs-number">120</span>,<span class="hljs-number">40</span>,<span class="hljs-number">150</span>,<span class="hljs-number">3</span>],<br>        [<span class="hljs-number">60</span>,<span class="hljs-number">10</span>,<span class="hljs-number">80</span>,<span class="hljs-number">40</span>,<span class="hljs-number">4</span>],<br>        [<span class="hljs-number">90</span>,<span class="hljs-number">70</span>,<span class="hljs-number">120</span>,<span class="hljs-number">110</span>,<span class="hljs-number">5</span>],<br>        [<span class="hljs-number">20</span>,<span class="hljs-number">60</span>,<span class="hljs-number">40</span>,<span class="hljs-number">100</span>,<span class="hljs-number">6</span>],<br>        [<span class="hljs-number">50</span>,<span class="hljs-number">110</span>,<span class="hljs-number">70</span>,<span class="hljs-number">130</span>,<span class="hljs-number">7</span>],<br>    ]<br><br>    result = getSortBoxs(box_list)<br>    <span class="hljs-comment"># print(result)</span><br>    printBoxs(result)<br></code></pre></td></tr></table></figure>    </div></div><p>输出结果：</p><p><img src="https://img-blog.csdnimg.cn/321a2e6a84cd4f25b2adf28074dd8718.png" alt="在这里插入图片描述"></p><p>至此需求解决。</p><h1 id="4-方法三"><a href="#4-方法三" class="headerlink" title="4. 方法三"></a>4. 方法三</h1><h2 id="4-1-想法"><a href="#4-1-想法" class="headerlink" title="4.1 想法"></a>4.1 想法</h2><p>待续…</p><h2 id="4-2-代码实现"><a href="#4-2-代码实现" class="headerlink" title="4.2 代码实现"></a>4.2 代码实现</h2><p>待续…</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>小应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>坐标</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>说明</title>
    <link href="/2023/01/18/%E8%AF%B4%E6%98%8E/"/>
    <url>/2023/01/18/%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="关于本站"><a href="#关于本站" class="headerlink" title="关于本站"></a>关于本站</h1><p>本站基于<a href="https://github.com/huihui486/huihui486.github.io">github仓库</a>，搭配框架而成，加载可能偏慢，甚至出现加载失败情况，请多尝试刷新或百度加速方法。</p><p>有问题欢迎<a href="/about/">联系我</a>。</p><h1 id="关于评论"><a href="#关于评论" class="headerlink" title="关于评论"></a>关于评论</h1><p>每篇文章末尾会有评论功能，但由于没有登录功能，无法保存用户名等信息，故昵称需自行填写。必要时可以填上昵称方便识别您的评论内容为同一人。</p><p>评论内容与链接一一对应，若文章标题更改，网站链接也将改变，评论内容将清空。</p><h1 id="关于看板娘-live2d"><a href="#关于看板娘-live2d" class="headerlink" title="关于看板娘(live2d)"></a>关于看板娘(live2d)</h1><p>使用大佬接口，模型有限。可以对话、换模型，有彩蛋，不喜欢可以关闭。</p><p>移动端可能会出问题，无法显示、使用。</p><h1 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h1><h2 id="Evolve进化"><a href="#Evolve进化" class="headerlink" title="Evolve进化"></a>Evolve进化</h2><p>游戏图鉴</p><p><img src="/img/evolve.png"></p><p>注意</p><p>请大家记得<strong>定期保存、导出存档，备份</strong>，以免存档丢失，失去继续玩的动力。</p><p>建议使用<strong>Chrome（谷歌）</strong>或者<strong>Firefox（火狐）</strong>浏览器进行游戏。</p><p>适度游戏益脑，沉迷游戏伤身</p><p>合理安排时间，享受健康生活</p><p>游戏地址</p><p><a href="/Evolve">https://huihui486.github.io/Evolve</a></p><h1 id="安利"><a href="#安利" class="headerlink" title="安利"></a>安利</h1><p>安利一个本人在用的airport</p><p>优点：便宜、速度快、稳定，不限设备，晚高峰不限速。</p><p><a href="https://www.fyb-aff.com/auth/register?code=2Dbf">戳这里直达官网</a></p><p>使用：官网有详细教程与下载链接。</p><p><img src="/img/airport01.png"></p><p><img src="/img/airport02.png"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>凑数法实现十进制转二进制</title>
    <link href="/2023/01/18/%E5%87%91%E6%95%B0%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    <url>/2023/01/18/%E5%87%91%E6%95%B0%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="1-除2取余法实现十进制转二进制"><a href="#1-除2取余法实现十进制转二进制" class="headerlink" title="1. 除2取余法实现十进制转二进制"></a>1. 除2取余法实现十进制转二进制</h1><p>众所周知，十进制转二进制最广为人知、家喻户晓的方法，就是</p><p><strong>整数部分除2取余，小数部分乘2取整</strong></p><p>这个方法简单便捷易上手，且代码实现也比较简单</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys<br><br>num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;传统方法十进制转二进制整数部分\n请输入十进制整数：&quot;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> num.isdigit():<br>        num = <span class="hljs-built_in">int</span>(num)<br>        <span class="hljs-keyword">if</span> num &lt;= sys.maxsize:<br>            <span class="hljs-keyword">break</span><br>    num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;非法输入，请重试：&quot;</span>)<br><br>result = <span class="hljs-string">&#x27;&#x27;</span><br>temp = num<br><br><span class="hljs-keyword">while</span> temp&gt;<span class="hljs-number">0</span>:<br>    result = <span class="hljs-built_in">str</span>(temp % <span class="hljs-number">2</span>) + result<br>    temp = <span class="hljs-built_in">int</span>(temp / <span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(result,temp)<br><br><span class="hljs-built_in">print</span>(num,<span class="hljs-string">&quot;的二进制结果为：&quot;</span>,result)<br></code></pre></td></tr></table></figure><h1 id="2-凑数法实现十进制转二进制"><a href="#2-凑数法实现十进制转二进制" class="headerlink" title="2. 凑数法实现十进制转二进制"></a>2. 凑数法实现十进制转二进制</h1><h2 id="2-1-凑数法是什么"><a href="#2-1-凑数法是什么" class="headerlink" title="2.1 凑数法是什么"></a>2.1 凑数法是什么</h2><p>简单来说，凑数法是将每一位1乘上该位对应的2^(n-1)再累加起来，所以会出现每一项都等于此项前所有项的和的性质。</p><p>举个栗子：</p><p><strong>123 &#x3D; 64+32+16+8+2+1 &#x3D; 2^6+2^5+2^4+2^3+2^1+2^0  &#x3D; 1111011</strong></p><p>可以看到，123是将除了4&#x3D;2^2以外，即除了第3位以外的第1、2、4、5、6、7位上的2^(n-1)相加，即为所求。而将这些位填上1，其余位填上0即为1111011。</p><h2 id="2-2-凑数法另一种解读"><a href="#2-2-凑数法另一种解读" class="headerlink" title="2.2 凑数法另一种解读"></a>2.2 <a id='second'>凑数法另一种解读</a></h2><p>上面的这种方式如果用手算的话计算量太大，还不如直接用除2取余来的划算。所以有了第二种解读。</p><p>另一种解读方式为<strong>比较法</strong>。</p><p>还是上面这个例子，我们先列出一张2的n次幂的表，接着从高位开始用123与之比较，若123小则取0；若123大取1，且减去2的n次幂。然后移动至低一位用新的数接着比较。如下图所示，以此类推，当比较完所有位后，即可得出结果。</p><p><img src="https://img-blog.csdnimg.cn/a3177858e1e34eb88176cc9a041a2cb2.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/d496901d3fe24ea2a44fb0204103ce66.png" alt="在这里插入图片描述"></p><h2 id="2-3-python代码实现凑数法"><a href="#2-3-python代码实现凑数法" class="headerlink" title="2.3 python代码实现凑数法"></a>2.3 python代码实现凑数法</h2><p>代码实现有很多种方式，这里选取的是<a href='#second'>第二种解读方式</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br>num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;十进制转二进制凑数法整数部分实现\n请输入十进制整数：&quot;</span>)<br><br><span class="hljs-comment"># 2^63=9223372036854775808</span><br><span class="hljs-comment"># sys.maxsize=2^63</span><br><span class="hljs-comment"># 防止数值越界</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> num.isdigit():<br>        num = <span class="hljs-built_in">int</span>(num)<br>        <span class="hljs-keyword">if</span> num &lt;= sys.maxsize:<br>            <span class="hljs-keyword">break</span><br>    num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;非法输入，请重试：&quot;</span>)<br><br>max_index = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">63</span>):<br>    <span class="hljs-keyword">if</span> num &lt; <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,i):<br>        max_index = i-<span class="hljs-number">1</span><br>        <span class="hljs-comment">#print(max_index)</span><br>        <span class="hljs-keyword">break</span><br><br>result = <span class="hljs-string">&#x27;&#x27;</span><br>temp = num<br><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(max_index,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> temp &gt;= <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,index):<br>        result = result + <span class="hljs-string">&#x27;1&#x27;</span><br>        temp = <span class="hljs-built_in">abs</span>(temp - <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, index))<br>    <span class="hljs-keyword">else</span>:<br>        result = result + <span class="hljs-string">&#x27;0&#x27;</span><br><br><span class="hljs-built_in">print</span>(num,<span class="hljs-string">&quot;的二进制结果为：&quot;</span>,result)<br></code></pre></td></tr></table></figure><h1 id="3-凑数法优势？"><a href="#3-凑数法优势？" class="headerlink" title="3. 凑数法优势？"></a>3. 凑数法优势？</h1><p>那么看到这里有朋友可能要说，那是不是凑数法一定比取2取余法好用呢？</p><p>要想知道结果很简单，在代码里加入time模块来监视程序运行时间，比较之下就能知道孰胜孰劣。修改代码如下</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 输入</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_num</span>():<br>    num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;十进制转二进制凑数法整数部分实现\n请输入十进制整数：&quot;</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> num.isdigit():<br>            num = <span class="hljs-built_in">int</span>(num)<br>            <span class="hljs-keyword">if</span> num &lt;= sys.maxsize:<br>                <span class="hljs-keyword">break</span><br>        num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;非法输入，请重试：&quot;</span>)<br>    <span class="hljs-keyword">return</span> num<br><br><span class="hljs-comment"># 凑数法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">comparison_method</span>(<span class="hljs-params">num</span>):<br>    max_index = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">63</span>):<br>        <span class="hljs-keyword">if</span> num &lt; <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,i):<br>            max_index = i-<span class="hljs-number">1</span><br>            <span class="hljs-keyword">break</span><br>    result = <span class="hljs-string">&#x27;&#x27;</span><br>    temp = num<br>    <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(max_index,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> temp &gt;= <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,index):<br>            result = result + <span class="hljs-string">&#x27;1&#x27;</span><br>            temp = <span class="hljs-built_in">abs</span>(temp - <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, index))<br>        <span class="hljs-keyword">else</span>:<br>            result = result + <span class="hljs-string">&#x27;0&#x27;</span><br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-comment"># 除2取余</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">division_method</span>(<span class="hljs-params">num</span>):<br>    result = <span class="hljs-string">&#x27;&#x27;</span><br>    temp = num<br>    <span class="hljs-keyword">while</span> temp&gt;<span class="hljs-number">0</span>:<br>        result = <span class="hljs-built_in">str</span>(temp % <span class="hljs-number">2</span>) + result<br>        temp = <span class="hljs-built_in">int</span>(temp / <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    num = input_num()<br>    start = time.perf_counter()<br>    result1 = comparison_method(num)<br>    middle = time.perf_counter()<br>    result2 = division_method(num)<br>    end = time.perf_counter()<br>    <span class="hljs-built_in">print</span>(num,<span class="hljs-string">&quot;凑数法结果为：&quot;</span>,result1,<span class="hljs-string">&quot;用时：&quot;</span>,<span class="hljs-built_in">str</span>(middle-start))<br>    <span class="hljs-built_in">print</span>(num,<span class="hljs-string">&quot;除2取余法结果为：&quot;</span>,result2,<span class="hljs-string">&quot;用时：&quot;</span>,<span class="hljs-built_in">str</span>(end-middle))<br></code></pre></td></tr></table></figure><p>输入123456，输出结果如下图所示。</p><p><img src="https://img-blog.csdnimg.cn/5f4dff71992941aaa7f57ba91519fee8.png" alt="在这里插入图片描述"></p><p>可见凑数法并没有比除2取余法快，反而更慢了，而且这种差距随着数字增加继续扩大</p><p><img src="https://img-blog.csdnimg.cn/c2d6f4bbe49e4068a3cec74954b97f0d.png" alt="在这里插入图片描述"></p><p>因为在位数多的情况下，凑数法不仅要跟所有位进行比较，还要作减法；而除2取余只有除法，这一点在计算机速度上可以体现出来。</p><p>而且在实际手算中，除2取余法也要比凑数法更快（数字不小的情况下）。这也难怪除2取余法会成为最为流行的十进制转二进制方法了。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>凑数法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>进制转换</tag>
      
      <tag>代码实现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B站直播弹幕姬</title>
    <link href="/2023/01/17/B%E7%AB%99%E7%9B%B4%E6%92%AD%E5%BC%B9%E5%B9%95%E5%A7%AC/"/>
    <url>/2023/01/17/B%E7%AB%99%E7%9B%B4%E6%92%AD%E5%BC%B9%E5%B9%95%E5%A7%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p><strong>本文于2022-01-16发布于CSDN，且为<a href="https://huihui486.github.io/2023/01/16/AioWebSocket%E5%AE%9E%E7%8E%B0python%E5%BC%82%E6%AD%A5%E6%8E%A5%E6%94%B6B%E7%AB%99%E7%9B%B4%E6%92%AD%E5%BC%B9%E5%B9%95/">上一篇文章</a>后续，现迁移至此。</strong></p><p>这个软件是基于我半年多前写的一个<a href="https://www.bilibili.com/video/BV1zN411Q7u4"><strong>小小小软件</strong></a>的一个大更新，即集合前端和后端写成的一个软件、程序应用。不过其实相当于重新写了一个就是了www</p><p>完整代码我已经开源到gitee和github上了，并且软件的使用方法已经发到b站，链接在文末，欢迎大家一起学习讨论。</p><h1 id="1-日志对象"><a href="#1-日志对象" class="headerlink" title="1. 日志对象"></a>1. 日志对象</h1><p>软件有日志都很常见了，既可以了解到现在程序运行在哪，也可以很方便地定位到出错代码。</p><p>写在所有代码之前作为全局变量也是为了各个代码模块方便调用。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        展开/隐藏代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">日志对象 </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;log&#x27;</span>):<br>    os.mkdir(<span class="hljs-string">&#x27;log&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">creatLogger</span>():<br>    logger = logging.getLogger(<span class="hljs-string">&#x27;mylogger&#x27;</span>)<br>    logger.setLevel(logging.DEBUG)<br>    <span class="hljs-comment"># 全部日志处理器</span><br>    rf_handler = logging.handlers.TimedRotatingFileHandler(<span class="hljs-string">&#x27;log/all.log&#x27;</span>, when=<span class="hljs-string">&#x27;midnight&#x27;</span>, interval=<span class="hljs-number">1</span>, backupCount=<span class="hljs-number">7</span>,<br>                                                               atTime=datetime.time(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>    rf_handler.setFormatter(logging.Formatter(<span class="hljs-string">&quot;%(asctime)s - %(levelname)s - %(message)s&quot;</span>))<br>    <span class="hljs-comment"># error日志处理器</span><br>    f_handler = logging.FileHandler(<span class="hljs-string">&#x27;log/error.log&#x27;</span>)<br>    f_handler.setLevel(logging.ERROR)<br>    f_handler.setFormatter(logging.Formatter(<span class="hljs-string">&quot;%(asctime)s - %(levelname)s - %(filename)s[:%(lineno)d] - %(message)s&quot;</span>))<br>    <span class="hljs-comment"># 加入logger</span><br>    logger.addHandler(rf_handler)<br>    logger.addHandler(f_handler)<br>    <span class="hljs-comment"># 返回设置好的logger对象</span><br>    <span class="hljs-keyword">return</span> logger<br><br><span class="hljs-comment"># 实例化</span><br>logger = creatLogger()<br></code></pre></td></tr></table></figure>    </div></div><h1 id="2-获取弹幕"><a href="#2-获取弹幕" class="headerlink" title="2. 获取弹幕"></a>2. 获取弹幕</h1><p>获取b站直播弹幕用到了websocket协议，使用到了aiowebsocket这个类。详情可以看我上一篇文章（<a href="https://blog.csdn.net/Sharp486/article/details/122466308">AioWebSocket实现python异步接收B站直播弹幕</a>），已经讲得挺详细的了（大概），将文章中的代码封装成一个类就可以拿来用了，这里就只列出函数定义头了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiliSocket</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">startup</span>(<span class="hljs-params">self,roomid</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getRealRoomid</span>(<span class="hljs-params">self,url</span>):<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">check2close</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">close</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">sendHeartBeat</span>(<span class="hljs-params">self, websocket</span>):<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">receDM</span>(<span class="hljs-params">self, websocket</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">printDM</span>(<span class="hljs-params">self, data</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">DANMU_handle</span>(<span class="hljs-params">self,data</span>):<br></code></pre></td></tr></table></figure><p>所不同的是，我新加入了几个函数。</p><ul><li>有些直播间地址栏的房间号是3位数及以下的，这些不是真实房间号，是获取不了弹幕的。所以getRealRoomid()用来获取真实房间号。</li><li>DANMU_handle()这个方法是对弹幕的处理，包括对用户输入的关键词进行筛选，及筛选后将弹幕传到展示窗口。</li><li>软件运行时，主线程要给窗口刷新，不能用来接收弹幕，所以接收弹幕只能放在子线程。而子线程怎么关闭呢？我上网找过很多方法：一开始在aiowebsocket这个类里找到一个close_connection的方法，但这个方法好像不能帮我结束线程；后来用loop.stop()结束了循环并且用join()对子线程进行阻塞，等待子线程退出，这样其实也是可行的，但有时候又不行，反而会因为阻塞时间太长导致主窗口主线程无响应。后来我找到可以通过抛出异常来使线程退出，于是我写了如下代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">check2close</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    循环判断关闭标志位closeFlag是否为真</span><br><span class="hljs-string">    若为真则抛出异常来结束该子线程</span><br><span class="hljs-string">    一定要设置休眠否则占据资源导致卡死</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">0.2</span>)<br>        <span class="hljs-keyword">if</span> self.__closeFlag == <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">raise</span> KeyboardInterrupt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">close</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;通过设置标志位来结束线程&#x27;&#x27;&#x27;</span><br>    self.__closeFlag = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>定义一个标志位__closeFlag，子线程通过扫描它来判断自己是否该退出，若是则抛出异常来退出该线程。完美解决！</p><h1 id="3-qt窗口"><a href="#3-qt窗口" class="headerlink" title="3. qt窗口"></a>3. qt窗口</h1><p>前端方面用到的是pyqt5。之前我也用过<a href="https://www.bilibili.com/video/BV1zN411Q7u4">tkinter（python自带的一个gui库）来实现过类似的应用</a>，那是我半年前写的。但我发现tkinter功能太少，界面太简陋，不好操作，所以换成了比较多人用的gui，也就是pyqt5。但qt资料大多是c++的，转换到python不是一件容易事，对于我这种新手来说真的很不容易（所以为什么要用python来写啊哈哈）。</p><p>首先安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install PyQt5<br>pip install PyQt5-tools<br></code></pre></td></tr></table></figure><p>导入pyqt5模块（这是懒人一键全部导入，也可以一个一个模块导入）</p><p>其他模块就不赘述了，用到再导入就好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PyQt5 <span class="hljs-keyword">import</span> QtCore<br><span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> PyQt5.QtGui <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> PyQt5.uic <span class="hljs-keyword">import</span> loadUi<br></code></pre></td></tr></table></figure><p>在pyqt5安装目录下可以找到qt designer，这个图形化软件可以帮助我们设计出想要的窗口。</p><p><img src="https://img-blog.csdnimg.cn/8d1d0035f423402eb6f6d99e55e733cd.png" alt="在这里插入图片描述"></p><h2 id="3-1-窗口间传递信号"><a href="#3-1-窗口间传递信号" class="headerlink" title="3.1 窗口间传递信号"></a>3.1 窗口间传递信号</h2><p>有时候，多个窗口之间要互相传递信息，这时候可以利用qt的信号和槽来实现。</p><p>举个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义一种信号，两个参数 类型分别是： 整数 和 字符串</span><br><span class="hljs-comment"># 调用 emit方法 发信号时，传入参数 必须是这里指定的 参数类型</span><br>text_print = QtCore.pyqtSignal(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">str</span>)<br></code></pre></td></tr></table></figure><p>发送信号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">text_print.emit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;abc&#x27;</span>)<br></code></pre></td></tr></table></figure><p>接收信号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">printFun</span>(<span class="hljs-params">num,string</span>):<br><span class="hljs-built_in">print</span>(num,string)<br><br>text_print.connect(printFun)<br></code></pre></td></tr></table></figure><p>而我很多时候需要传递不同种参数，需要多个信号变量，所以直接定义一个信号类并实例化，作为全局变量。这样就可以让不同的类之间相互交流了，不是继承自QObject的类也可以用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">自定义信号源对象类型，一定要继承自 QObject</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MySignals</span>(<span class="hljs-title class_ inherited__">QObject</span>):<br>    <span class="hljs-comment"># 定义一种信号，两个参数 类型分别是： 整数 和 字符串</span><br>    <span class="hljs-comment"># 调用 emit方法 发信号时，传入参数 必须是这里指定的 参数类型</span><br>    text_print = QtCore.pyqtSignal(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">str</span>)<br>    <span class="hljs-comment"># 还可以定义其他种类的信号</span><br>    my_Signal = QtCore.pyqtSignal(<span class="hljs-built_in">str</span>)<br>    new_comment = QtCore.pyqtSignal(<span class="hljs-built_in">bool</span>,<span class="hljs-built_in">str</span>)<br>    otherChange = QtCore.pyqtSignal(<span class="hljs-built_in">str</span>,<span class="hljs-built_in">str</span>)<br>    sizeChange = QtCore.pyqtSignal(<span class="hljs-built_in">str</span>,<span class="hljs-built_in">int</span>)<br>    fontChange = QtCore.pyqtSignal(QFont)<br><br><span class="hljs-comment"># 实例化</span><br>global_ms = MySignals()<br></code></pre></td></tr></table></figure><h2 id="3-2-主窗口"><a href="#3-2-主窗口" class="headerlink" title="3.2 主窗口"></a>3.2 主窗口</h2><p>主窗口比较简单，简单写写就行。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        展开/隐藏代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainWindow</span>(<span class="hljs-title class_ inherited__">QMainWindow</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(MainWindow, self).__init__(parent)<br>        loadUi(<span class="hljs-string">&#x27;ui/MainWindow.ui&#x27;</span>, self)<br>        <span class="hljs-comment"># 标题、图标</span><br>        self.setWindowTitle(<span class="hljs-string">&#x27;主窗口&#x27;</span>)<br>        self.setWindowIcon(QIcon(iconPath))<br>        <span class="hljs-comment"># 禁止最大化按钮</span><br>        self.setWindowFlags(Qt.WindowMinimizeButtonHint|Qt.WindowCloseButtonHint)<br>        <span class="hljs-comment"># ui按钮链接</span><br>        self.Ui_init()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Ui_init</span>(<span class="hljs-params">self</span>):<br>        self.openSettingWinButton.triggered.connect(<span class="hljs-keyword">lambda</span>: global_ms.my_Signal.emit(<span class="hljs-string">&#x27;setting&#x27;</span>))<br>        self.openAboutWinButton.triggered.connect(<span class="hljs-keyword">lambda</span>: global_ms.my_Signal.emit(<span class="hljs-string">&#x27;about&#x27;</span>))<br>        self.startButton.clicked.connect(<span class="hljs-keyword">lambda</span>: global_ms.my_Signal.emit(<span class="hljs-string">&#x27;start&#x27;</span>))<br>        self.closeButton.clicked.connect(<span class="hljs-keyword">lambda</span>: global_ms.my_Signal.emit(<span class="hljs-string">&#x27;close&#x27;</span>))<br></code></pre></td></tr></table></figure>    </div></div><h2 id="3-3-设置窗口"><a href="#3-3-设置窗口" class="headerlink" title="3.3 设置窗口"></a>3.3 设置窗口</h2><p>设置窗口主要是对展示窗口进行一些参数的设置，比如文字大小、颜色、字体等。重点和难点应该是参数发生变化后如何与展示窗口进行交流并及时调整。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigWindow</span>(<span class="hljs-title class_ inherited__">QWidget</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(ConfigWindow, self).__init__(parent)<br>        loadUi(<span class="hljs-string">&#x27;ui/ConfigWindow.ui&#x27;</span>, self)<br>        <span class="hljs-comment"># 标题、图标</span><br>        self.setWindowTitle(<span class="hljs-string">&#x27;设置&#x27;</span>)<br>        self.setWindowIcon(QIcon(iconPath))<br></code></pre></td></tr></table></figure><p>这里我采用的是（QLineEdit+QPushButton ）和QSpinBox 实现参数的改变。将QLineEdit设置为只读，当用户点击按钮修改参数时，程序会修改QLineEdit的内容；QSpinBox 则是直接改变内容的。当QLineEdit或QSpinBox的值发生变化时，发出信号并传递需要修改的参数，展示信号接收后作出相应操作。 </p><p>下面的是窗口初始化部分代码，将QLineEdit或QSpinBox的值发生变化时与函数绑定，将参数发射出去。（接收部分详见展示窗口）</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        展开/隐藏代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 发送者id颜色</span><br>self.userColorView.setText(initusercolor)<br>self.userColorButton.clicked.connect(self.getUserColor)<br>self.userColorView.textChanged.connect(self.UserColorChange<br><span class="hljs-comment"># 字体大小</span><br>self.charactersSize.setValue(initsize)<br>self.charactersSize.valueChanged.connect(self.getSize)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getUserColor</span>(<span class="hljs-params">self</span>):<br>    c = QColorDialog.getColor()<br>    colorName = c.name()<br>    <span class="hljs-comment"># getColor对话框点击取消时会返回缺省值#000000</span><br>    <span class="hljs-comment"># 为避免这种情况直接ban掉#000000，未找到更好方案</span><br>    <span class="hljs-keyword">if</span> colorName != <span class="hljs-string">&#x27;#000000&#x27;</span>:<br>        <span class="hljs-comment"># print(colorName)</span><br>        self.userColorView.setText(colorName)<br>    <span class="hljs-keyword">else</span>:<br>        msg_box = QMessageBox(QMessageBox.Warning, <span class="hljs-string">&#x27;提示&#x27;</span>, <span class="hljs-string">&#x27;#000000禁止设置，黑色请尝试#000001等&#x27;</span>)<br>        msg_box.exec_()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">UserColorChange</span>(<span class="hljs-params">self,colorName</span>):<br>    self.usercolor = colorName<br>    global_ms.otherChange.emit(<span class="hljs-string">&#x27;userColor&#x27;</span>,colorName)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getSize</span>(<span class="hljs-params">self,size</span>):<br>self.size = size<br>global_ms.sizeChange.emit(<span class="hljs-string">&#x27;charactersSize&#x27;</span>,self.size)<br></code></pre></td></tr></table></figure>    </div></div><p>设置窗口还有一个功能，就是将参数导入、导出，不用每次都手动设置。因为我不熟悉配置文件的操作，不知道我这种存储方式用那种文件比较合适，所以用了我最熟悉的excel表。如果各位有什么好推荐的话欢迎向我提出。</p><p>一开始我是打算打开一个文件浏览框让用户选择路径和文件名，但发现这样不好操作，因为做不到将用户设置的路径保存下来，下次自动导入（不可能为了它新建一个文件来保存吧，这样也不保险）。最保险的方法就是自己在代码里设定好路径，每次到这个路径下去找就行了。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        展开/隐藏代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">配置文件路径</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>iconPath = os.getcwd() + <span class="hljs-string">r&#x27;\config\icon.jpg&#x27;</span><br>settingPath = os.getcwd() + <span class="hljs-string">r&#x27;\config\BiliComment.xlsx&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">GetOpenXlsxPath</span>(<span class="hljs-params">self</span>):<br>    logger.info(<span class="hljs-string">&#x27;***尝试导入&#x27;</span>)<br>    <span class="hljs-keyword">if</span> os.path.exists(settingPath):<br>        self.ImportXlsx()<br>    <span class="hljs-keyword">else</span>:<br>        logger.warning(<span class="hljs-string">&#x27;***文件不存在&#x27;</span>)<br>        msg_box = QMessageBox(QMessageBox.Warning, <span class="hljs-string">&#x27;提示&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;settingPath&#125;</span>不存在！请先导出配置&#x27;</span>)<br>        msg_box.exec_()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GetSaveXlsxPath</span>(<span class="hljs-params">self</span>):<br>    logger.info(<span class="hljs-string">&#x27;***尝试导出&#x27;</span>)<br>    self.SaveXlsx()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ImportXlsx</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># 从文件中读取参数</span><br>    <span class="hljs-keyword">try</span>:<br>        self.listWidget1.clear()<br>        self.listWidget2.clear()<br>        self.listWidget3.clear()<br>        self.listWidget4.clear()<br>        <span class="hljs-comment"># 只读模式下读取速度更快，但没有columns这个属性</span><br>        wb = openpyxl.load_workbook(settingPath)<br>        ws = wb.active<br>        <span class="hljs-keyword">for</span> column <span class="hljs-keyword">in</span> ws.columns:<br>            <span class="hljs-keyword">if</span> column[<span class="hljs-number">0</span>].value == <span class="hljs-string">&#x27;white&#x27;</span>:<br>                self.ImportAdd(column,self.listWidget1,whiteUser)<br>            <span class="hljs-keyword">elif</span> column[<span class="hljs-number">0</span>].value == <span class="hljs-string">&#x27;black&#x27;</span>:<br>                self.ImportAdd(column,self.listWidget2,blackUser)<br>            <span class="hljs-keyword">elif</span> column[<span class="hljs-number">0</span>].value == <span class="hljs-string">&#x27;kw&#x27;</span>:<br>                self.ImportAdd(column,self.listWidget3,keywords)<br>            <span class="hljs-keyword">elif</span> column[<span class="hljs-number">0</span>].value == <span class="hljs-string">&#x27;filterKW&#x27;</span>:<br>                self.ImportAdd(column,self.listWidget4,filterKWs)<br>            <span class="hljs-keyword">elif</span> column[<span class="hljs-number">0</span>].value == <span class="hljs-string">&#x27;size&#x27;</span>:<br>                self.charactersSize.setValue(column[<span class="hljs-number">1</span>].value)<br>                self.LineNumber.setValue(column[<span class="hljs-number">2</span>].value)<br>                self.LineHeight.setValue(column[<span class="hljs-number">3</span>].value)<br>            <span class="hljs-keyword">elif</span> column[<span class="hljs-number">0</span>].value == <span class="hljs-string">&#x27;color&#x27;</span>:<br>                self.userColorView.setText(column[<span class="hljs-number">1</span>].value)<br>                self.comColorView.setText(column[<span class="hljs-number">2</span>].value)<br>            <span class="hljs-keyword">elif</span> column[<span class="hljs-number">0</span>].value == <span class="hljs-string">&#x27;font&#x27;</span>:<br>                self.fontComboBox.setCurrentFont(QFont(column[<span class="hljs-number">1</span>].value))<br>            <span class="hljs-keyword">elif</span> column[<span class="hljs-number">0</span>].value == <span class="hljs-string">&#x27;background&#x27;</span>:<br>                filePath = column[<span class="hljs-number">1</span>].value<br>                <span class="hljs-keyword">if</span> filePath != <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> os.path.exists(filePath):<br>                    self.backgroundView.setText(filePath)<br>                <span class="hljs-keyword">else</span>:<br>                    logger.warning(<span class="hljs-string">&#x27;图片修改失败。原因：图片不存在&#x27;</span>)<br>                    msg_box = QMessageBox(QMessageBox.Warning, <span class="hljs-string">&#x27;提示&#x27;</span>, <span class="hljs-string">&#x27;图片修改失败。原因：图片不存在&#x27;</span>)<br>                    msg_box.exec_()<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">continue</span><br>        logger.info(<span class="hljs-string">&#x27;***导入成功&#x27;</span>)<br>        msg_box = QMessageBox(QMessageBox.Warning, <span class="hljs-string">&#x27;提示&#x27;</span>, <span class="hljs-string">f&#x27;导入成功： <span class="hljs-subst">&#123;settingPath&#125;</span>&#x27;</span>)<br>        msg_box.exec_()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logger.error(<span class="hljs-string">u&#x27;***导入时出现异常：&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(e))<br>        msg_box = QMessageBox(QMessageBox.Warning, <span class="hljs-string">&#x27;警告&#x27;</span>, <span class="hljs-string">&#x27;导入时出现异常&#x27;</span>)<br>        msg_box.exec_()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ImportAdd</span>(<span class="hljs-params">self,column,listWidget,<span class="hljs-type">List</span></span>):<br>    <span class="hljs-keyword">for</span> cell <span class="hljs-keyword">in</span> column[<span class="hljs-number">1</span>:]:<br>        value = <span class="hljs-built_in">str</span>(cell.value)<br>        <span class="hljs-keyword">if</span> value != <span class="hljs-string">&#x27;None&#x27;</span>:<br>            listWidget.addItem(value)<br>            <span class="hljs-type">List</span>.append(value)<br></code></pre></td></tr></table></figure>    </div></div><h2 id="3-4-弹幕展示窗口"><a href="#3-4-弹幕展示窗口" class="headerlink" title="3.4 弹幕展示窗口"></a>3.4 弹幕展示窗口</h2><p>展示窗口是最复杂的，花了我很长时间找资料和解决办法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DisplayWindow</span>(<span class="hljs-title class_ inherited__">QDockWidget</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(DisplayWindow, self).__init__(parent)<br>        loadUi(<span class="hljs-string">&#x27;ui/DisplayWindow.ui&#x27;</span>, self)<br>        self.setWindowFlags(Qt.WindowStaysOnTopHint|Qt.FramelessWindowHint|Qt.Tool)  <span class="hljs-comment"># 置顶、无边框、隐藏任务栏</span><br>        self.setAttribute(Qt.WA_TranslucentBackground)    <span class="hljs-comment"># 窗体背景透明</span><br>        self.setMouseTracking(<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 设置widget鼠标跟踪</span><br></code></pre></td></tr></table></figure><h3 id="3-4-1-窗口中间层"><a href="#3-4-1-窗口中间层" class="headerlink" title="3.4.1 窗口中间层"></a>3.4.1 窗口中间层</h3><p>首先是文字显示。</p><p>为了无边框后可以移动窗口（移动窗口的方法一会儿讲到），我一开始用的是QLabel来设置文字，因为我发现鼠标在QLabel上是不会变成其他样式，而其他输入控件上鼠标会变成输入样式，导致无法移动。但QLabel有个致命缺点就是无法换行，导致我要添加多个QLabel来实现多行文本。而且当设置文字样式（比如文字描边后）也会出现无法移动窗口的情况。不仅占用资源多还容易出错。</p><p>这时候我想到，既然鼠标在QLabel上不受影响，那如果在顶层铺一层QLabel，不设置文字（相当于透明），下面的控件会不会受影响呢？事实证明，覆盖下面控件后，鼠标就不受下面控件影响了，终于可以愉快的移动窗口了！</p><p>于是下面的文字显示控件换成了QPlainTextEdit。这个控件既可以方便的换行、设置最大行数，又可以设置不同部分的文字颜色。这样，弹幕发送者与弹幕内容的文字颜色分开，就可以更直观了！</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        展开/隐藏代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 中间层初始化</span><br>self.comWidget = QWidget()<br>self.gridLayout.addWidget(self.comWidget, <span class="hljs-number">0</span>, <span class="hljs-number">26</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>)<br>self.comVerticalLayout = QVBoxLayout(self.comWidget)<br>self.comVerticalLayout.setObjectName(<span class="hljs-string">&quot;comVerticalLayout&quot;</span>)<br><span class="hljs-comment"># 添加textEdit用于显示弹幕，并初始化</span><br>self.textEdit = QPlainTextEdit(self.comWidget)<br>self.textEdit.setReadOnly(<span class="hljs-literal">True</span>)<br>self.textEdit.setUndoRedoEnabled(<span class="hljs-literal">False</span>)<br>self.textEdit.setMaximumBlockCount(initlinenum)<br>font = QFont(initfont)<br>font.setWordSpacing(<span class="hljs-number">20</span>)<br>self.textEdit.setFont(font)<br>self.textEdit.setStyleSheet(<br>    <span class="hljs-string">f&quot;font-size:<span class="hljs-subst">&#123;initsize&#125;</span>px;border: none; background-color: transparent; font-weight: bold;&quot;</span>)<br>self.comVerticalLayout.addWidget(self.textEdit)<br><span class="hljs-comment"># 指针</span><br>self.FontFormat = QTextCharFormat()<br>self.BlockFormat = QTextBlockFormat()<br>self.tc = self.textEdit.textCursor()<br></code></pre></td></tr></table></figure>    </div></div><p>将弹幕加入QPlainTextEdit时我发现只能在主线程中操作，如果在子线程中会有显示延迟的情况。不过这也没有什么办法</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        展开/隐藏代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">addComment</span>(<span class="hljs-params">self,<span class="hljs-built_in">bool</span>,msg</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    这里必须在主线程里添加，否则显示会延迟，但消息多时可能会导致窗口无响应。</span><br><span class="hljs-string">    装在列表里for循坏也不行，目前还没找到更好的方法</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-comment"># 设置发送者id样式</span><br>        self.FontFormat.setForeground(self.Userfont)<br>        self.textEdit.mergeCurrentCharFormat(self.FontFormat)<br>        self.textEdit.appendPlainText(<span class="hljs-string">&quot;&quot;</span>.join(msg.split(<span class="hljs-string">&#x27;: &#x27;</span>)[<span class="hljs-number">0</span>]) + <span class="hljs-string">&quot;: &quot;</span>)<br>        <span class="hljs-comment"># 设置弹幕内容样式</span><br>        self.FontFormat.setForeground(self.Comfont)<br>        self.textEdit.mergeCurrentCharFormat(self.FontFormat)<br>        self.tc.movePosition(QTextCursor.End)<br>        self.textEdit.insertPlainText(<span class="hljs-string">&quot;&quot;</span>.join(msg.split(<span class="hljs-string">&#x27;: &#x27;</span>)[<span class="hljs-number">1</span>]))<br>        <span class="hljs-comment"># 刷新,可有可无</span><br>        QApplication.processEvents()<br></code></pre></td></tr></table></figure>    </div></div><h3 id="3-4-2-窗口顶层"><a href="#3-4-2-窗口顶层" class="headerlink" title="3.4.2 窗口顶层"></a>3.4.2 窗口顶层</h3><p>然后是置顶、无边框后的移动处理和改变大小处理。</p><p>窗口移动和改变大小可以合在一起说，因为他们都是利用了鼠标操作函数<strong>mousePressEvent</strong>，<strong>mouseMoveEvent</strong>，<strong>mouseReleaseEvent</strong>。只要我们重写这三个函数，就可以实现这些功能了。</p><p>窗口移动很简单，只需要在发生鼠标点击事件mousePressEvent后跟踪坐标并计算移动后坐标值，将窗口移动至此坐标就行。<br>但改变大小有点麻烦，我需要划分一定的区域，在这部分区域内才允许改变窗口大小，并且改变鼠标样式。所以本来直接在顶层铺一个label，我改成了在顶层铺一个QWidget，并在QWidget里面添加了3个QLabel，分别在如下位置：</p><img src="https://img-blog.csdnimg.cn/7fd3a70753e740248ffb2b11d52f3a96.png" alt="在这里插入图片描述" style="zoom: 67%;" /><p>然后，设置当鼠标在这3个QLabel上面时改变鼠标样式，提醒用户这些位置可以改变窗口大小。效果如下图：</p><img src="https://img-blog.csdnimg.cn/f59de390b341439fbf58d917885932ab.png" alt="在这里插入图片描述"  /><p>这部分代码如下：</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        展开/隐藏代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_initDrag</span>(<span class="hljs-params">self</span>):    <span class="hljs-comment"># 初始化部分</span><br>    <span class="hljs-comment"># 设置鼠标跟踪判断扳机默认值</span><br>    self._move_drag = <span class="hljs-literal">False</span><br>    self._corner_drag = <span class="hljs-literal">False</span><br>    self._bottom_drag = <span class="hljs-literal">False</span><br>    self._right_drag = <span class="hljs-literal">False</span><br>    <span class="hljs-comment"># 判断鼠标位置切换鼠标手势</span><br>    self.cornerLabel.setCursor(Qt.SizeFDiagCursor)<br>    self.bottomLabel.setCursor(Qt.SizeVerCursor)<br>    self.rightLabel.setCursor(Qt.SizeHorCursor)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">resizeEvent</span>(<span class="hljs-params">self, QResizeEvent</span>):<br>    <span class="hljs-comment"># 自定义窗口调整大小事件</span><br>    <span class="hljs-comment"># 改变窗口大小的三个坐标范围</span><br>    ran = <span class="hljs-number">30</span><br>    self._right_rect = [QPoint(x, y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.width() - ran, self.width() )<br>                        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, self.height()-ran)]<br>    self._bottom_rect = [QPoint(x, y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, self.width() - ran)<br>                         <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.height() - ran, self.height())]<br>    self._corner_rect = [QPoint(x, y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.width() - ran, self.width() )<br>                         <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.height() - ran, self.height() )]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mousePressEvent</span>(<span class="hljs-params">self, event</span>):<br>    <span class="hljs-comment"># 重写鼠标点击的事件</span><br>    <span class="hljs-keyword">if</span> (event.button() == Qt.LeftButton) <span class="hljs-keyword">and</span> (event.pos() <span class="hljs-keyword">in</span> self._corner_rect):<br>        <span class="hljs-comment"># 鼠标左键点击右下角边界区域</span><br>        self._corner_drag = <span class="hljs-literal">True</span><br>        event.accept()<br>    <span class="hljs-keyword">elif</span> (event.button() == Qt.LeftButton) <span class="hljs-keyword">and</span> (event.pos() <span class="hljs-keyword">in</span> self._right_rect):<br>        <span class="hljs-comment"># 鼠标左键点击右侧边界区域</span><br>        self._right_drag = <span class="hljs-literal">True</span><br>        event.accept()<br>    <span class="hljs-keyword">elif</span> (event.button() == Qt.LeftButton) <span class="hljs-keyword">and</span> (event.pos() <span class="hljs-keyword">in</span> self._bottom_rect):<br>        <span class="hljs-comment"># 鼠标左键点击下侧边界区域</span><br>        self._bottom_drag = <span class="hljs-literal">True</span><br>        event.accept()<br>    <span class="hljs-keyword">elif</span> (event.button() == Qt.LeftButton) <span class="hljs-keyword">and</span> (event.y() &lt; self.height()-<span class="hljs-number">30</span>):<br>        <span class="hljs-comment"># 鼠标左键点击其他位置</span><br>        self._move_drag = <span class="hljs-literal">True</span><br>        self.move_DragPosition = event.globalPos() - self.pos()<br>        event.accept()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mouseMoveEvent</span>(<span class="hljs-params">self, QMouseEvent</span>):<br>    <span class="hljs-comment"># 当鼠标左键点击不放及满足点击区域的要求后，分别实现不同的窗口调整</span><br>    <span class="hljs-comment"># 没有定义左方和上方相关的5个方向，主要是因为实现起来不难，但是效果很差，拖放的时候窗口闪烁，再研究研究是否有更好的实现</span><br>    <span class="hljs-keyword">if</span> Qt.LeftButton <span class="hljs-keyword">and</span> self._right_drag:<br>        <span class="hljs-comment"># 右侧调整窗口宽度</span><br>        self.resize(QMouseEvent.pos().x(), self.height())<br>        QMouseEvent.accept()<br>    <span class="hljs-keyword">elif</span> Qt.LeftButton <span class="hljs-keyword">and</span> self._bottom_drag:<br>        <span class="hljs-comment"># 下侧调整窗口高度</span><br>        self.resize(self.width(), QMouseEvent.pos().y())<br>        QMouseEvent.accept()<br>    <span class="hljs-keyword">elif</span> Qt.LeftButton <span class="hljs-keyword">and</span> self._corner_drag:<br>        <span class="hljs-comment"># 右下角同时调整高度和宽度</span><br>        self.resize(QMouseEvent.pos().x(), QMouseEvent.pos().y())<br>        QMouseEvent.accept()<br>    <span class="hljs-keyword">elif</span> Qt.LeftButton <span class="hljs-keyword">and</span> self._move_drag:<br>        <span class="hljs-comment"># 其他位置拖放窗口位置</span><br>        self.move(QMouseEvent.globalPos() - self.move_DragPosition)<br>        QMouseEvent.accept()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mouseReleaseEvent</span>(<span class="hljs-params">self, QMouseEvent</span>):<br>    <span class="hljs-comment"># 鼠标释放后，各扳机复位</span><br>    self._move_drag = <span class="hljs-literal">False</span><br>    self._corner_drag = <span class="hljs-literal">False</span><br>    self._bottom_drag = <span class="hljs-literal">False</span><br>    self._right_drag = <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure>    </div></div><h3 id="3-4-3-窗口底层"><a href="#3-4-3-窗口底层" class="headerlink" title="3.4.3 窗口底层"></a>3.4.3 窗口底层</h3><p>然后是无边框后的背景处理。</p><p>因为我想要实现改变窗口透明度的功能，但控件透明度不变（不然文字也看不清了），所以找了很多代码，例如下面的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">MainWindow.setWindowOpacity(<span class="hljs-number">0.85</span>)  <span class="hljs-comment"># 设置窗口透明度</span><br>MainWindow.setAttribute(QtCore.Qt.WA_TranslucentBackground)  <span class="hljs-comment"># 设置窗口背景透明</span><br></code></pre></td></tr></table></figure><p>但这些都只能改变整个窗口包括控件透明度。但我需要的是仅仅只是背景的改变。于是我想到，在文字控件的下面再铺一层QLabel，让这个QLabel显示图片，并且自己在ps里制作几张不同透明度的图片，分别让他显示出来：</p><p><img src="https://img-blog.csdnimg.cn/4d08934d23e74c52923505d49ac2e8bd.png" alt="在这里插入图片描述"></p><p>搞定！窗口初始化代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 底层label，设置背景图片</span><br>self.backLabel = QLabel()<br>self.backLabel.setObjectName(<span class="hljs-string">&quot;backLabel&quot;</span>)<br>pix = QPixmap(initbackground)<br>self.backLabel.setPixmap(pix)<br>self.backLabel.setScaledContents(<span class="hljs-literal">True</span>)<br>self.gridLayout.addWidget(self.backLabel, <span class="hljs-number">0</span>, <span class="hljs-number">26</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>)<br></code></pre></td></tr></table></figure><p>注意一定要铺在上层文字控件的同一位置（0, 26, 11, 11)，否则这个Label会被挤到一边去。也正是这个原因我在qt designer里弄不到理想的效果，所以只能自己在代码里实现了。</p><p>后续要改变透明度的话，只需要将图片路径传进QPixmap再调用setPixmap就可以了。除了白底图片，其他任意图片也是可以的。</p><h3 id="3-4-4-信号连接"><a href="#3-4-4-信号连接" class="headerlink" title="3.4.4 信号连接"></a>3.4.4 信号连接</h3><p>初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">SignalConnect_init</span>(<span class="hljs-params">self</span>):<br>    global_ms.new_comment.connect(self.addComment)<br>    global_ms.sizeChange.connect(self.modifySize)<br>    global_ms.fontChange.connect(self.modifyFont)<br>    global_ms.otherChange.connect(self.modifyOther)<br></code></pre></td></tr></table></figure><p>以下代码以modifySize()为例：</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        展开/隐藏代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">modifySize</span>(<span class="hljs-params">self,<span class="hljs-built_in">type</span>,value</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;多线程减轻主线程压力，防止窗口无响应&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">aa</span>():<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">&#x27;charactersSize&#x27;</span>:<br>                self.textEdit.setStyleSheet(<br>                    <span class="hljs-string">f&quot;font-size:<span class="hljs-subst">&#123;value&#125;</span>px;font-weight:bold;border: none; background-color: transparent;&quot;</span>)<br>                logger.info(<span class="hljs-string">&#x27;修改 文字大小 成功&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">&#x27;lineNum&#x27;</span>:<br>                self.textEdit.setMaximumBlockCount(value)<br>                logger.info(<span class="hljs-string">&#x27;修改 行数 成功&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">&#x27;lineHeight&#x27;</span>:<br>                self.BlockFormat.setLineHeight(value, QTextBlockFormat.FixedHeight)<br>                self.tc.setBlockFormat(self.BlockFormat)<br>                self.textEdit.setTextCursor(self.tc)<br>                logger.info(<span class="hljs-string">&#x27;修改 行高 成功&#x27;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            logger.error(<span class="hljs-string">u&#x27;修改参数失败：&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(e))<br>    threading.Thread(target=aa).start()<br></code></pre></td></tr></table></figure>    </div></div><p>添加弹幕因为显示问题不得不在主线程中进行，但修改参数没有这些问题，所以在子线程中修改就行，可以减少主线程压力，防止窗口无响应。</p><h2 id="3-5-托盘"><a href="#3-5-托盘" class="headerlink" title="3.5 托盘"></a>3.5 托盘</h2><p>托盘这里我采用的方法是继承QObject类。因为像MainWindow他有一个菜单栏QMenu，那我只要模仿他，创建一个QMenu，再将动作QAction加进去，就变成了一个托盘菜单选项了。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        展开/隐藏代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TUOPAN</span>(<span class="hljs-title class_ inherited__">QObject</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(TUOPAN, self).__init__()<br>        self.Ui_init()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Ui_init</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># -------------------- 托盘开始 ----------------</span><br>        <span class="hljs-comment"># 在系统托盘处显示图标</span><br>        self.tp = QSystemTrayIcon(self)<br>        self.tp.setIcon(QIcon(<span class="hljs-string">&#x27;./config/icon.jpg&#x27;</span>))<br>        <span class="hljs-comment"># 设置系统托盘图标的菜单</span><br>        self.a1 = QAction(<span class="hljs-string">&#x27;&amp;主窗口&#x27;</span>, triggered=<span class="hljs-keyword">lambda</span>:global_ms.my_Signal.emit(<span class="hljs-string">&#x27;MainWindow&#x27;</span>))<br>        self.a2 = QAction(<span class="hljs-string">&#x27;&amp;开始/更新&#x27;</span>, triggered=<span class="hljs-keyword">lambda</span>:global_ms.my_Signal.emit(<span class="hljs-string">&#x27;start&#x27;</span>))<br>        self.a3 = QAction(<span class="hljs-string">&#x27;&amp;关闭&#x27;</span>, triggered=<span class="hljs-keyword">lambda</span>:global_ms.my_Signal.emit(<span class="hljs-string">&#x27;close&#x27;</span>))<br>        self.a4 = QAction(<span class="hljs-string">&#x27;&amp;设置&#x27;</span>, triggered=<span class="hljs-keyword">lambda</span>:global_ms.my_Signal.emit(<span class="hljs-string">&#x27;setting&#x27;</span>))<br>        self.a5 = QAction(<span class="hljs-string">&#x27;&amp;退出&#x27;</span>, triggered=<span class="hljs-keyword">lambda</span>:global_ms.my_Signal.emit(<span class="hljs-string">&#x27;exit&#x27;</span>))  <span class="hljs-comment"># 直接退出可以用qApp.quit</span><br>        self.tpMenu = QMenu()<br>        self.tpMenu.addAction(self.a1)<br>        self.tpMenu.addAction(self.a2)<br>        self.tpMenu.addAction(self.a3)<br>        self.tpMenu.addAction(self.a4)<br>        self.tpMenu.addAction(self.a5)<br>        self.tp.setContextMenu(self.tpMenu)<br>        <span class="hljs-comment"># 点击活动连接到函数处理</span><br>        self.tp.activated.connect(self.act)<br>        <span class="hljs-comment"># 不调用show不会显示系统托盘</span><br>        self.tp.show()<br>        <span class="hljs-comment"># -------------------- 托盘结束 ------------------</span><br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">act</span>(<span class="hljs-params">self, reason</span>):<br>        <span class="hljs-comment"># 鼠标点击icon传递的信号会带有一个整形的值，1是表示单击右键，2是双击，3是单击左键，4是用鼠标中键点击</span><br>        <span class="hljs-keyword">if</span> reason == <span class="hljs-number">2</span>:<br>            global_ms.my_Signal.emit(<span class="hljs-string">&#x27;MainWindow&#x27;</span>)<br></code></pre></td></tr></table></figure>    </div></div><h1 id="4-主函数"><a href="#4-主函数" class="headerlink" title="4.主函数"></a>4.主函数</h1><p>上面已经完成了各个功能模块的类的代码，接下来只需要把他们联系起来</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        展开/隐藏代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiliDanmuji</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 主要对象</span><br>        self.app = QApplication(sys.argv)<br>        self.app.setQuitOnLastWindowClosed(<span class="hljs-literal">False</span>)  <span class="hljs-comment"># 最小化托盘用,关闭所有窗口也不结束程序</span><br>        self.scan() <span class="hljs-comment"># 扫描文件夹，若不存在报错</span><br>        self.w = MainWindow()   <span class="hljs-comment"># 主窗口</span><br>        self.settingWindow = ConfigWindow() <span class="hljs-comment"># 设置窗口</span><br>        self.display = DisplayWindow()  <span class="hljs-comment"># 弹幕展示窗口</span><br>        self.about = AboutInfo()  <span class="hljs-comment"># 关于窗口</span><br>        self.tuopan = TUOPAN()  <span class="hljs-comment"># 托盘对象</span><br>        <span class="hljs-comment"># 爬虫对象</span><br>        self.bilisocket = BiliSocket()<br>        <span class="hljs-comment"># 开始运行、弹幕窗口隐藏标志</span><br>        self.startFlag = <span class="hljs-literal">False</span><br>        self.isHide = <span class="hljs-literal">True</span><br>        <span class="hljs-comment"># 接受子窗口传回来的信号  然后调用主界面的函数</span><br>        global_ms.my_Signal.connect(self.SignalHandle)<br>        <span class="hljs-comment"># 写日志</span><br>        logger.info(<span class="hljs-string">&#x27;----------------------初始化成功-----------------------&#x27;</span>)<br></code></pre></td></tr></table></figure>    </div></div><p>点击（开始&#x2F;更新）按钮执行的函数：先判断输入房间号是否合法；然后判断是否已经开始，若已经开始则为更新效果（先执行关闭操作再重新开始）。将获取弹幕的操作放到子线程。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        展开/隐藏代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">start_run</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 获取房间号</span><br>        text = self.w.roomidEdit.text()<br>        <span class="hljs-keyword">if</span> text != <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">and</span> text.isdigit():<br>            <span class="hljs-keyword">if</span> self.startFlag == <span class="hljs-literal">False</span>:<br>                self.startFlag = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(self.SocketTread.is_alive())<br>                <span class="hljs-keyword">if</span> self.SocketTread.is_alive():<br>                    self.close_com()<br>                self.display.clearWindow()<br>                self.bilisocket.comList.clear()<br>            self.display.show()<br>            self.isHide = <span class="hljs-literal">False</span><br>            loop = asyncio.new_event_loop()<br>            self.SocketTread = threading.Thread(target=self.asyncTreadfun, args=(loop, text),<br>                                                name=<span class="hljs-string">&#x27;SocketTread&#x27;</span>)<br>            self.SocketTread.daemon = <span class="hljs-literal">True</span>  <span class="hljs-comment"># 守护线程</span><br>            self.SocketTread.start()<br>            logger.info(<span class="hljs-string">f&#x27;开启/更新成功，当前房间：<span class="hljs-subst">&#123;text&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            self.startFlag = <span class="hljs-literal">False</span><br>            logger.info(<span class="hljs-string">&#x27;输入房间号有误&#x27;</span>)<br>            msg_box = QMessageBox(QMessageBox.Warning, <span class="hljs-string">&#x27;提示&#x27;</span>, <span class="hljs-string">&#x27;请输入正确房间号&#x27;</span>)<br>            msg_box.exec_()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        self.startFlag = <span class="hljs-literal">False</span><br>        self.isHide = <span class="hljs-literal">True</span><br>        logger.error(<span class="hljs-string">u&#x27;开启/更新出错：&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(e))<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">asyncTreadfun</span>(<span class="hljs-params">self,new_loop,roomid</span>):<br>    <span class="hljs-keyword">try</span>:<br>        asyncio.set_event_loop(new_loop)<br>        self.loop = asyncio.get_event_loop()<br>        task = asyncio.ensure_future(self.bilisocket.startup(roomid))<br>        self.loop.run_until_complete(asyncio.wait([task]))<br>    <span class="hljs-keyword">except</span> RuntimeError <span class="hljs-keyword">as</span> e:<br>        logger.warning(<span class="hljs-string">u&#x27;loop循环未完成退出（若是关闭时为正常现象）。错误信息：&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(e))<br></code></pre></td></tr></table></figure>    </div></div><p>点击（关闭）按钮执行的函数：调用BiliSocket类的自定义close方法，并且等待它抛出异常，从而达到结束线程的效果。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        展开/隐藏代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">close_com</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">if</span> self.startFlag == <span class="hljs-literal">True</span>:<br>        self.display.hide()<br>        self.isHide = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">try</span>:<br>            logger.info(<span class="hljs-string">&#x27;///尝试关闭循环&#x27;</span>)<br>            self.bilisocket.close()<br>            <span class="hljs-comment"># 等待抛出异常，抛出后线程自动结束</span><br>            time.sleep(<span class="hljs-number">0.3</span>)<br>            logger.info(<span class="hljs-string">f&#x27;loop状态：<span class="hljs-subst">&#123;self.loop.is_running()&#125;</span>，<span class="hljs-subst">&#123;self.loop.is_closed()&#125;</span> / &#x27;</span><br>                        <span class="hljs-string">f&#x27;SocketTread状态：<span class="hljs-subst">&#123;self.SocketTread.is_alive()&#125;</span>&#x27;</span>)<br>            logger.info(<span class="hljs-string">&#x27;///循环关闭成功&#x27;</span>)<br>        <span class="hljs-keyword">except</span> NotImplementedError <span class="hljs-keyword">as</span> e:<br>            logger.error(<span class="hljs-string">u&#x27;///关闭循环出错：&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(e))<br></code></pre></td></tr></table></figure>    </div></div><p>接收信号并处理</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        展开/隐藏代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">SignalHandle</span>(<span class="hljs-params">self,value</span>):<br>    <span class="hljs-keyword">if</span> value == <span class="hljs-string">&#x27;closeWin&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;子窗口被关闭&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> value == <span class="hljs-string">&#x27;MainWindow&#x27;</span>:<br>        self.w.show()<br>    <span class="hljs-keyword">elif</span> value == <span class="hljs-string">&#x27;start&#x27;</span>:<br>        self.start_run()<br>    <span class="hljs-keyword">elif</span> value == <span class="hljs-string">&#x27;close&#x27;</span>:<br>        self.close_com()<br>    <span class="hljs-keyword">elif</span> value == <span class="hljs-string">&#x27;setting&#x27;</span>:<br>        self.settingWindow.show()<br>    <span class="hljs-keyword">elif</span> value == <span class="hljs-string">&#x27;about&#x27;</span>:<br>        self.about.show()<br>    <span class="hljs-keyword">elif</span> value == <span class="hljs-string">&#x27;WebSocketError&#x27;</span>:<br>        self.close_com()<br>        msg_box = QMessageBox(QMessageBox.Warning, <span class="hljs-string">&#x27;警告&#x27;</span>, <span class="hljs-string">&#x27;获取弹幕失败&#x27;</span>)<br>        msg_box.exec_()<br>    <span class="hljs-keyword">elif</span> value == <span class="hljs-string">&#x27;exit&#x27;</span>:<br>        self.quitApp()<br></code></pre></td></tr></table></figure>    </div></div><p>退出软件</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        展开/隐藏代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">quitApp</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;托盘关闭&#x27;</span>)<br>    <span class="hljs-keyword">if</span> self.isHide == <span class="hljs-literal">False</span>:<br>        self.close_com()<br>    <span class="hljs-comment"># 关闭窗体程序</span><br>    QCoreApplication.instance().quit()<br>    self.tuopan.tp.setVisible(<span class="hljs-literal">False</span>)<br>    logger.info(<span class="hljs-string">&#x27;----------------------程序正常退出-----------------------&#x27;</span>)<br>    sys.exit(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure>    </div></div><p>写上循环指令</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        展开/隐藏代码    </div>    <div class='spoiler-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 显示主窗口，开始处理窗口事件</span><br>        self.w.show()<br>        sys.exit(self.app.exec_())<br>    <span class="hljs-keyword">except</span>:<br>        logger.critical(<span class="hljs-string">&#x27;**********************程序异常退出************************&#x27;</span>)<br></code></pre></td></tr></table></figure>    </div></div><p>最后，只需要在其他地方实例化这个类，并且调用它的run方法，就可以运行整个程序啦！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">danmuji = BiliDanmuji()<br>danmuji.run()<br></code></pre></td></tr></table></figure><h1 id="5-最终成果及使用方法"><a href="#5-最终成果及使用方法" class="headerlink" title="5. 最终成果及使用方法"></a>5. 最终成果及使用方法</h1><p>b站：<a href="https://www.bilibili.com/video/BV1LP4y177sa">https://www.bilibili.com/video/BV1LP4y177sa</a></p><p>CSDN：<a href="https://blog.csdn.net/Sharp486/article/details/122516917">https://blog.csdn.net/Sharp486/article/details/122516917</a></p><p>个人网站：<a href="https://huihui486.github.io/2023/01/18/B%E7%AB%99%E7%9B%B4%E6%92%AD%E5%BC%B9%E5%B9%95%E5%A7%AC">https://huihui486.github.io/2023/01/18/B站直播弹幕姬</a></p><h1 id="6-开源地址"><a href="#6-开源地址" class="headerlink" title="6.开源地址"></a>6.开源地址</h1><p>gitee：<a href="https://gitee.com/huihui486/bilibili-danmuji">https://gitee.com/huihui486/bilibili-danmuji</a><br>github：<a href="https://github.com/huihui486/bilibili-danmuji">https://github.com/huihui486/bilibili-danmuji</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>获取b站直播弹幕</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>b站直播</tag>
      
      <tag>弹幕</tag>
      
      <tag>pyqt5</tag>
      
      <tag>可视化</tag>
      
      <tag>程序应用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AioWebSocket实现python异步接收B站直播弹幕</title>
    <link href="/2023/01/16/AioWebSocket%E5%AE%9E%E7%8E%B0python%E5%BC%82%E6%AD%A5%E6%8E%A5%E6%94%B6B%E7%AB%99%E7%9B%B4%E6%92%AD%E5%BC%B9%E5%B9%95/"/>
    <url>/2023/01/16/AioWebSocket%E5%AE%9E%E7%8E%B0python%E5%BC%82%E6%AD%A5%E6%8E%A5%E6%94%B6B%E7%AB%99%E7%9B%B4%E6%92%AD%E5%BC%B9%E5%B9%95/</url>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p><strong>本文是2022-01-13发表于CSDN上的文章，当时并未搭建好网站，故现将此文转移至此。</strong></p><p><strong>原文：<a href="https://blog.csdn.net/Sharp486/article/details/122466308">https://blog.csdn.net/Sharp486/article/details/122466308</a></strong></p><p>第一次写文章，若有不对的地方请多多包涵并指正。</p><p>本篇后续：<a href="https://blog.csdn.net/Sharp486/article/details/122516917">【python+pyqt5】B站直播弹幕姬</a></p><h1 id="1-AioWebSocket是什么"><a href="#1-AioWebSocket是什么" class="headerlink" title="1. AioWebSocket是什么"></a>1. AioWebSocket是什么</h1><h2 id="1-1-认识WebSocket"><a href="#1-1-认识WebSocket" class="headerlink" title="1.1 认识WebSocket"></a>1.1 认识WebSocket</h2><p>Websocket是一种在单个TCP连接上进行全双工通信的协议。</p><p>WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><p>python中常用的WebSocket库有<strong>websocket-client</strong>，<strong>websockets</strong>，<strong>aiowebsocket</strong>三个。</p><h2 id="1-2-WebSocket工作原理"><a href="#1-2-WebSocket工作原理" class="headerlink" title="1.2 WebSocket工作原理"></a>1.2 WebSocket工作原理</h2><p>1.客户端向服务端发起建立请求，服务端响应后便在客户端与服务端之间建立起一个信道，这一步称之为<strong>握手</strong>。<br>2.建立好信道后，服务端就将新消息推送到信道，每当信道中有新的消息，客户端便可以拿到。<br>3.服务端为了不占用过多资源，需要定时检查与客户端是否还在连接，因此需要客户端定时向服务端发送心跳包（<strong>HeartBeat</strong>），确保连接不断开。</p><h2 id="1-3-认识AioWebSocket"><a href="#1-3-认识AioWebSocket" class="headerlink" title="1.3 认识AioWebSocket"></a>1.3 认识AioWebSocket</h2><p>而 AioWebSocket 是python里一个遵循 WebSocket 规范异步 WebSocket 客户端，相对于其他库它更轻、更快。而且异步的特性使得它可以同时接收消息和发送心跳包，更为方便，因此本文选用AioWebSocket。</p><h1 id="2-AioWebSocket相比于http-x2F-https的优势"><a href="#2-AioWebSocket相比于http-x2F-https的优势" class="headerlink" title="2. AioWebSocket相比于http&#x2F;https的优势"></a>2. AioWebSocket相比于http&#x2F;https的优势</h1><p>跟传统的http&#x2F;https协议相比，WebSocket是长连接，只需向客户端请求一次便可获得永久性连接；而http&#x2F;https是短连接，向客户端请求一次后便断开连接。因此在获取直播弹幕这种场景下显然WebSocket更具优势。</p><h2 id="2-1-http-x2F-https协议获取B站直播弹幕"><a href="#2-1-http-x2F-https协议获取B站直播弹幕" class="headerlink" title="2.1 http&#x2F;https协议获取B站直播弹幕"></a>2.1 http&#x2F;https协议获取B站直播弹幕</h2><p>我们打开任意一个直播间，打开F12，点击Network，搜索<strong>gethistory</strong>，可以看到这个链接就是历史弹幕，那么用代码对这个链接发起请求就能获取直播的弹幕。如果没有看见这个链接，可以尝试刷新网站。</p><img src="https://img-blog.csdnimg.cn/1d2c0786620c4c179d79fcdcabd928c3.png?x-oss-process=type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhcnA0ODY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:80%;" /><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>baseurl = <span class="hljs-string">&#x27;https://api.live.bilibili.com/xlive/web-room/v1/dM/gethistory&#x27;</span><br><span class="hljs-comment"># 要获取的弹幕的直播间号</span><br>roomid = <span class="hljs-literal">None</span><br><span class="hljs-comment"># 请求头</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Host&#x27;</span>: <span class="hljs-string">&#x27;api.live.bilibili.com&#x27;</span>,<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla / 5.0(Windows NT 10.0; Win64; x64) AppleWebKit / 537.36(KHTML, like Gecko) Chrome / 80.0.3987.122  Safari / 537.36&quot;</span><br>&#125;<br><span class="hljs-comment"># 传递的参数</span><br>data = &#123;<br>    <span class="hljs-string">&#x27;roomid&#x27;</span>: roomid,<br>    <span class="hljs-string">&#x27;csrf_token&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-string">&#x27;csrf&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-string">&#x27;visit_id&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getDANMU</span>():<br>    req = requests.post(url=baseurl, headers=headers, data=data)<br>    html = req.json()<br>    code = html[<span class="hljs-string">&#x27;code&#x27;</span>]<br><br>    <span class="hljs-keyword">if</span> req.status_code == <span class="hljs-number">200</span> <span class="hljs-keyword">and</span> code == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">for</span> dic <span class="hljs-keyword">in</span> html[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;room&#x27;</span>]:<br>            name = dic[<span class="hljs-string">&#x27;nickname&#x27;</span>]<br>            timeline = dic[<span class="hljs-string">&#x27;timeline&#x27;</span>].split(<span class="hljs-string">&#x27; &#x27;</span>)[-<span class="hljs-number">1</span>]<br>            text = dic[<span class="hljs-string">&#x27;text&#x27;</span>]<br>            <span class="hljs-comment"># msg = timeline + &#x27;&#x27; + name + &#x27;:&#x27; + text + &#x27;\n&#x27;</span><br>            msg = timeline + <span class="hljs-string">&#x27; &#x27;</span> + name + <span class="hljs-string">&#x27;:&#x27;</span> + text<br>            <span class="hljs-built_in">print</span>(msg)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    roomid = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入房间号:&#x27;</span>)<br>    getDANMU()<br></code></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://img-blog.csdnimg.cn/3a8dfdd05c5f4904a1ef9ca91e8b9df4.png?x-oss-process=type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhcnA0ODY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>可以看到，http只能一次性获取历史弹幕，这种方法虽然方便、简短，但若需长时间接收新弹幕，就需要循环请求。而且请求间隔不能太长也不能太短：太短会占用网络资源，甚至被封IP；太长会导致丢失一部分弹幕，因为每次请求只返回最新10条弹幕。</p><p><strong>而http&#x2F;https的这些缺点，正是WebSocket的优点。</strong></p><h2 id="2-2-AioWebSocket实现接收弹幕功能"><a href="#2-2-AioWebSocket实现接收弹幕功能" class="headerlink" title="2.2 AioWebSocket实现接收弹幕功能"></a>2.2 AioWebSocket实现接收弹幕功能</h2><p>实际上，B站直播弹幕也是通过WebSocket协议来实现的。那上文中的gethistory是怎么回事呢？其实进入直播间时会先初始化，我们看到一些历史弹幕，就是由gethistory这个链接返回的数据，后面新的弹幕，都是由WebSocket协议来接收的了。<br>下面我们来看看如何实现用WebSocket协议来接收弹幕。</p><p>我们随便找个直播间，打开F12，点击Network，搜索<strong>sub</strong>，可以看到，这个就是我们客户端与服务端通信的WebSocket协议了。</p><img src="https://img-blog.csdnimg.cn/cb46bee880cd4bcd83cd4afc51196336.png?x-oss-process=type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhcnA0ODY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:80%;" /><p>知道了b站直播也是靠WebSocket实现的，那么下一步，我们怎么用python去模拟客户端跟服务端建立连接呢？</p><p>github上其实已经有b站的api了我们不需要自己研究，只需要移植过来。</p><p><a href="https://github.com/lovelyyoshino/Bilibili-Live-API/blob/master/API.WebSocket.md">Bilibili-Live-API</a></p><p>我们只需要关注几部分：调用地址、数据包格式、消息类型</p><p>地址直接选择未加密的<img src="https://img-blog.csdnimg.cn/2dba065093fc42c0aaaa095075601dae.png" alt="在这里插入图片描述"></p><ul><li><p>按照操作类型分类</p><img src="https://img-blog.csdnimg.cn/951ffcf5114541728a1401050af3bc3b.png?x-oss-process=,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhcnA0ODY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:80%;" /></li><li><p>按消息类型分类</p><p>想要获得哪些信息只需要根据字段捕获就ok！详细可见下面代码，有DANMU_MSG和SEND_GIFT字段消息的捕获</p><p><img src="https://img-blog.csdnimg.cn/56fe821abf8748b9a59de8f931c918af.png?x-oss-process=type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhcnA0ODY=,size_13,color_FFFFFF,t_70,g_se,x_16"></p></li></ul><h1 id="3-如何使用AioWebSocket"><a href="#3-如何使用AioWebSocket" class="headerlink" title="3. 如何使用AioWebSocket"></a>3. 如何使用AioWebSocket</h1><h3 id="接下来看看如何在python中写代码"><a href="#接下来看看如何在python中写代码" class="headerlink" title="接下来看看如何在python中写代码"></a>接下来看看如何在python中写代码</h3><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install aiowebsocket<br></code></pre></td></tr></table></figure><p>导入模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">from</span> aiowebsocket.converses <span class="hljs-keyword">import</span> AioWebSocket<br><span class="hljs-keyword">import</span> json<br></code></pre></td></tr></table></figure><p>创建异步任务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">remote = <span class="hljs-string">&#x27;ws://broadcastlv.chat.bilibili.com:2244/sub&#x27;</span><br>roomid = <span class="hljs-string">&#x27;21733344&#x27;</span><br><br>data_raw = <span class="hljs-string">&#x27;000000&#123;headerLen&#125;0010000100000007000000017b22726f6f6d6964223a&#123;roomid&#125;7d&#x27;</span><br>data_raw = data_raw.<span class="hljs-built_in">format</span>(headerLen=<span class="hljs-built_in">hex</span>(<span class="hljs-number">27</span> + <span class="hljs-built_in">len</span>(roomid))[<span class="hljs-number">2</span>:],<br>                           roomid=<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(x))[<span class="hljs-number">2</span>:], <span class="hljs-built_in">list</span>(roomid))))<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">startup</span>():<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> AioWebSocket(remote) <span class="hljs-keyword">as</span> aws:<br>        converse = aws.manipulator<br>        <span class="hljs-keyword">await</span> converse.send(<span class="hljs-built_in">bytes</span>.fromhex(data_raw))<br>        tasks = [receDM(converse), sendHeartBeat(converse)]<br>        <span class="hljs-keyword">await</span> asyncio.wait(tasks)<br></code></pre></td></tr></table></figure><p>发送heartbeat包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">hb=<span class="hljs-string">&#x27;00 00 00 10 00 10 00 01  00 00 00 02 00 00 00 01&#x27;</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">sendHeartBeat</span>(<span class="hljs-params">websocket</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">30</span>)<br>        <span class="hljs-keyword">await</span> websocket.send(<span class="hljs-built_in">bytes</span>.fromhex(hb))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[Notice] Sent HeartBeat.&#x27;</span>)<br></code></pre></td></tr></table></figure><p>接收消息<br>（这里的  if recv_text &#x3D;&#x3D; None 整个if语句必须加上，否则会断开连接，不知道是阿b的问题还是代码的问题。）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">receDM</span>(<span class="hljs-params">websocket</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        recv_text = <span class="hljs-keyword">await</span> websocket.receive()<br><br>        <span class="hljs-keyword">if</span> recv_text == <span class="hljs-literal">None</span>:<br>            recv_text = <span class="hljs-string">b&#x27;\x00\x00\x00\x1a\x00\x10\x00\x01\x00\x00\x00\x08\x00\x00\x00\x01&#123;&quot;code&quot;:0&#125;&#x27;</span><br><br>        printDM(recv_text)<br><br><br><span class="hljs-comment"># 将数据包传入：</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printDM</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-comment"># 获取数据包的长度，版本和操作类型</span><br>    packetLen = <span class="hljs-built_in">int</span>(data[:<span class="hljs-number">4</span>].<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>)<br>    ver = <span class="hljs-built_in">int</span>(data[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>].<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>)<br>    op = <span class="hljs-built_in">int</span>(data[<span class="hljs-number">8</span>:<span class="hljs-number">12</span>].<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>)<br><br>    <span class="hljs-comment"># 有的时候可能会两个数据包连在一起发过来，所以利用前面的数据包长度判断，</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(data) &gt; packetLen):<br>        printDM(data[packetLen:])<br>        data = data[:packetLen]<br><br>    <span class="hljs-comment"># 有时会发送过来 zlib 压缩的数据包，这个时候要去解压。</span><br>    <span class="hljs-keyword">if</span> (ver == <span class="hljs-number">2</span>):<br>        data = zlib.decompress(data[<span class="hljs-number">16</span>:])<br>        printDM(data)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-comment"># ver 为1的时候为进入房间后或心跳包服务器的回应。op 为3的时候为房间的人气值。</span><br>    <span class="hljs-keyword">if</span> (ver == <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">3</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[RENQI]  &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(data[<span class="hljs-number">16</span>:].<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>)))<br>        <span class="hljs-keyword">return</span><br><br><br>    <span class="hljs-comment"># ver 不为2也不为1目前就只能是0了，也就是普通的 json 数据。</span><br>    <span class="hljs-comment"># op 为5意味着这是通知消息，cmd 基本就那几个了。</span><br>    <span class="hljs-keyword">if</span> (op == <span class="hljs-number">5</span>):<br>        <span class="hljs-keyword">try</span>:<br>            jd = json.loads(data[<span class="hljs-number">16</span>:].decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>, errors=<span class="hljs-string">&#x27;ignore&#x27;</span>))<br>            <span class="hljs-keyword">if</span> (jd[<span class="hljs-string">&#x27;cmd&#x27;</span>] == <span class="hljs-string">&#x27;DANMU_MSG&#x27;</span>):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[DANMU] &#x27;</span>, jd[<span class="hljs-string">&#x27;info&#x27;</span>][<span class="hljs-number">2</span>][<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;: &#x27;</span>, jd[<span class="hljs-string">&#x27;info&#x27;</span>][<span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">elif</span> (jd[<span class="hljs-string">&#x27;cmd&#x27;</span>] == <span class="hljs-string">&#x27;SEND_GIFT&#x27;</span>):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[GITT]&#x27;</span>, jd[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;uname&#x27;</span>], <span class="hljs-string">&#x27; &#x27;</span>, jd[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;action&#x27;</span>], <span class="hljs-string">&#x27; &#x27;</span>, jd[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;num&#x27;</span>], <span class="hljs-string">&#x27;x&#x27;</span>,<br>                      jd[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;giftName&#x27;</span>])<br>            <span class="hljs-keyword">elif</span> (jd[<span class="hljs-string">&#x27;cmd&#x27;</span>] == <span class="hljs-string">&#x27;LIVE&#x27;</span>):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[Notice] LIVE Start!&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> (jd[<span class="hljs-string">&#x27;cmd&#x27;</span>] == <span class="hljs-string">&#x27;PREPARING&#x27;</span>):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[Notice] LIVE Ended!&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[OTHER] &#x27;</span>, jd[<span class="hljs-string">&#x27;cmd&#x27;</span>])<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>入口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">try</span>:<br>        loop = asyncio.get_event_loop()<br>        loop.run_until_complete(startup())<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;退出&#x27;</span>)<br></code></pre></td></tr></table></figure><p>输出结果：</p><img src="https://img-blog.csdnimg.cn/06c2b091999242798bd167305057fcad.png?x-oss-process=type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhcnA0ODY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:80%;" /><p>[DANMU]开头的就是接收到的弹幕内容了。<br>开始还报了一个warning，是因为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tasks = [receDM(converse), sendHeartBeat(converse)]<br><span class="hljs-keyword">await</span> asyncio.wait(tasks)<br></code></pre></td></tr></table></figure><p>这种写法已经过期了，在以后新版本的python解释器中将不在适用。不过问题不大，以后不能用再改罢。</p><hr><h1 id="4-更新"><a href="#4-更新" class="headerlink" title="4. 更新"></a>4. 更新</h1><h2 id="4-1-2022-04-23更新"><a href="#4-1-2022-04-23更新" class="headerlink" title="4.1 2022-04-23更新"></a>4.1 2022-04-23更新</h2><p>结尾warning解决：（小伙伴投稿）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tasks = [asyncio.create_task(receDM(converse)), asyncio.create_task(sendHeartBeat(converse))]<br></code></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>获取b站直播弹幕</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>b站直播</tag>
      
      <tag>弹幕</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇文章</title>
    <link href="/2023/01/14/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/2023/01/14/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2022年创建github.io仓库，中间搁置了一年，忙考试，且不熟悉博客网站搭建。终于在2023年寒假靠百度前人的智慧，搭建了第一个属于自己的网站。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>第一篇博客，意味着某种开始。今后更新努力？尽量吧XD</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
